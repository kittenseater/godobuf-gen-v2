// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pbtest2.proto

#ifndef PROTOBUF_pbtest2_2eproto_INCLUDED
#define PROTOBUF_pbtest2_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_pbtest2_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[16];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTest0Impl();
void InitDefaultsTest0();
void InitDefaultsTest1_FMapEntry_DoNotUseImpl();
void InitDefaultsTest1_FMapEntry_DoNotUse();
void InitDefaultsTest1Impl();
void InitDefaultsTest1();
void InitDefaultsTest2_TestInner1Impl();
void InitDefaultsTest2_TestInner1();
void InitDefaultsTest2_TestInner2Impl();
void InitDefaultsTest2_TestInner2();
void InitDefaultsTest2_TestInner3_TestInner3_1Impl();
void InitDefaultsTest2_TestInner3_TestInner3_1();
void InitDefaultsTest2_TestInner3_TestInner3_2Impl();
void InitDefaultsTest2_TestInner3_TestInner3_2();
void InitDefaultsTest2_TestInner3_F1Entry_DoNotUseImpl();
void InitDefaultsTest2_TestInner3_F1Entry_DoNotUse();
void InitDefaultsTest2_TestInner3Impl();
void InitDefaultsTest2_TestInner3();
void InitDefaultsTest2Impl();
void InitDefaultsTest2();
void InitDefaultsTest3_InnerReqImpl();
void InitDefaultsTest3_InnerReq();
void InitDefaultsTest3_InnerOptImpl();
void InitDefaultsTest3_InnerOpt();
void InitDefaultsTest3_InnerRepImpl();
void InitDefaultsTest3_InnerRep();
void InitDefaultsTest3Impl();
void InitDefaultsTest3();
void InitDefaultsTest4_F5Entry_DoNotUseImpl();
void InitDefaultsTest4_F5Entry_DoNotUse();
void InitDefaultsTest4Impl();
void InitDefaultsTest4();
inline void InitDefaults() {
  InitDefaultsTest0();
  InitDefaultsTest1_FMapEntry_DoNotUse();
  InitDefaultsTest1();
  InitDefaultsTest2_TestInner1();
  InitDefaultsTest2_TestInner2();
  InitDefaultsTest2_TestInner3_TestInner3_1();
  InitDefaultsTest2_TestInner3_TestInner3_2();
  InitDefaultsTest2_TestInner3_F1Entry_DoNotUse();
  InitDefaultsTest2_TestInner3();
  InitDefaultsTest2();
  InitDefaultsTest3_InnerReq();
  InitDefaultsTest3_InnerOpt();
  InitDefaultsTest3_InnerRep();
  InitDefaultsTest3();
  InitDefaultsTest4_F5Entry_DoNotUse();
  InitDefaultsTest4();
}
}  // namespace protobuf_pbtest2_2eproto
class Test0;
class Test0DefaultTypeInternal;
extern Test0DefaultTypeInternal _Test0_default_instance_;
class Test1;
class Test1DefaultTypeInternal;
extern Test1DefaultTypeInternal _Test1_default_instance_;
class Test1_FMapEntry_DoNotUse;
class Test1_FMapEntry_DoNotUseDefaultTypeInternal;
extern Test1_FMapEntry_DoNotUseDefaultTypeInternal _Test1_FMapEntry_DoNotUse_default_instance_;
class Test2;
class Test2DefaultTypeInternal;
extern Test2DefaultTypeInternal _Test2_default_instance_;
class Test2_TestInner1;
class Test2_TestInner1DefaultTypeInternal;
extern Test2_TestInner1DefaultTypeInternal _Test2_TestInner1_default_instance_;
class Test2_TestInner2;
class Test2_TestInner2DefaultTypeInternal;
extern Test2_TestInner2DefaultTypeInternal _Test2_TestInner2_default_instance_;
class Test2_TestInner3;
class Test2_TestInner3DefaultTypeInternal;
extern Test2_TestInner3DefaultTypeInternal _Test2_TestInner3_default_instance_;
class Test2_TestInner3_F1Entry_DoNotUse;
class Test2_TestInner3_F1Entry_DoNotUseDefaultTypeInternal;
extern Test2_TestInner3_F1Entry_DoNotUseDefaultTypeInternal _Test2_TestInner3_F1Entry_DoNotUse_default_instance_;
class Test2_TestInner3_TestInner3_1;
class Test2_TestInner3_TestInner3_1DefaultTypeInternal;
extern Test2_TestInner3_TestInner3_1DefaultTypeInternal _Test2_TestInner3_TestInner3_1_default_instance_;
class Test2_TestInner3_TestInner3_2;
class Test2_TestInner3_TestInner3_2DefaultTypeInternal;
extern Test2_TestInner3_TestInner3_2DefaultTypeInternal _Test2_TestInner3_TestInner3_2_default_instance_;
class Test3;
class Test3DefaultTypeInternal;
extern Test3DefaultTypeInternal _Test3_default_instance_;
class Test3_InnerOpt;
class Test3_InnerOptDefaultTypeInternal;
extern Test3_InnerOptDefaultTypeInternal _Test3_InnerOpt_default_instance_;
class Test3_InnerRep;
class Test3_InnerRepDefaultTypeInternal;
extern Test3_InnerRepDefaultTypeInternal _Test3_InnerRep_default_instance_;
class Test3_InnerReq;
class Test3_InnerReqDefaultTypeInternal;
extern Test3_InnerReqDefaultTypeInternal _Test3_InnerReq_default_instance_;
class Test4;
class Test4DefaultTypeInternal;
extern Test4DefaultTypeInternal _Test4_default_instance_;
class Test4_F5Entry_DoNotUse;
class Test4_F5Entry_DoNotUseDefaultTypeInternal;
extern Test4_F5Entry_DoNotUseDefaultTypeInternal _Test4_F5Entry_DoNotUse_default_instance_;
namespace google {
namespace protobuf {
template<> ::Test0* Arena::Create< ::Test0>(Arena*);
template<> ::Test1* Arena::Create< ::Test1>(Arena*);
template<> ::Test1_FMapEntry_DoNotUse* Arena::Create< ::Test1_FMapEntry_DoNotUse>(Arena*);
template<> ::Test2* Arena::Create< ::Test2>(Arena*);
template<> ::Test2_TestInner1* Arena::Create< ::Test2_TestInner1>(Arena*);
template<> ::Test2_TestInner2* Arena::Create< ::Test2_TestInner2>(Arena*);
template<> ::Test2_TestInner3* Arena::Create< ::Test2_TestInner3>(Arena*);
template<> ::Test2_TestInner3_F1Entry_DoNotUse* Arena::Create< ::Test2_TestInner3_F1Entry_DoNotUse>(Arena*);
template<> ::Test2_TestInner3_TestInner3_1* Arena::Create< ::Test2_TestInner3_TestInner3_1>(Arena*);
template<> ::Test2_TestInner3_TestInner3_2* Arena::Create< ::Test2_TestInner3_TestInner3_2>(Arena*);
template<> ::Test3* Arena::Create< ::Test3>(Arena*);
template<> ::Test3_InnerOpt* Arena::Create< ::Test3_InnerOpt>(Arena*);
template<> ::Test3_InnerRep* Arena::Create< ::Test3_InnerRep>(Arena*);
template<> ::Test3_InnerReq* Arena::Create< ::Test3_InnerReq>(Arena*);
template<> ::Test4* Arena::Create< ::Test4>(Arena*);
template<> ::Test4_F5Entry_DoNotUse* Arena::Create< ::Test4_F5Entry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google

enum Test2_TestEnum {
  Test2_TestEnum_VALUE_0 = 0,
  Test2_TestEnum_VALUE_1 = 1,
  Test2_TestEnum_VALUE_2 = 2,
  Test2_TestEnum_VALUE_3 = 3
};
bool Test2_TestEnum_IsValid(int value);
const Test2_TestEnum Test2_TestEnum_TestEnum_MIN = Test2_TestEnum_VALUE_0;
const Test2_TestEnum Test2_TestEnum_TestEnum_MAX = Test2_TestEnum_VALUE_3;
const int Test2_TestEnum_TestEnum_ARRAYSIZE = Test2_TestEnum_TestEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* Test2_TestEnum_descriptor();
inline const ::std::string& Test2_TestEnum_Name(Test2_TestEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    Test2_TestEnum_descriptor(), value);
}
inline bool Test2_TestEnum_Parse(
    const ::std::string& name, Test2_TestEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Test2_TestEnum>(
    Test2_TestEnum_descriptor(), name, value);
}
enum Enum0 {
  NULL_ = 0,
  ONE = 1,
  TWO = 2,
  THREE = 3,
  FOUR = 4
};
bool Enum0_IsValid(int value);
const Enum0 Enum0_MIN = NULL_;
const Enum0 Enum0_MAX = FOUR;
const int Enum0_ARRAYSIZE = Enum0_MAX + 1;

const ::google::protobuf::EnumDescriptor* Enum0_descriptor();
inline const ::std::string& Enum0_Name(Enum0 value) {
  return ::google::protobuf::internal::NameOfEnum(
    Enum0_descriptor(), value);
}
inline bool Enum0_Parse(
    const ::std::string& name, Enum0* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Enum0>(
    Enum0_descriptor(), name, value);
}
// ===================================================================

class Test0 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Test0) */ {
 public:
  Test0();
  virtual ~Test0();

  Test0(const Test0& from);

  inline Test0& operator=(const Test0& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Test0(Test0&& from) noexcept
    : Test0() {
    *this = ::std::move(from);
  }

  inline Test0& operator=(Test0&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test0& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test0* internal_default_instance() {
    return reinterpret_cast<const Test0*>(
               &_Test0_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Test0* other);
  friend void swap(Test0& a, Test0& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Test0* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test0>(NULL);
  }

  Test0* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test0>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Test0& from);
  void MergeFrom(const Test0& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Test0* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Test0)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_pbtest2_2eproto::TableStruct;
  friend void ::protobuf_pbtest2_2eproto::InitDefaultsTest0Impl();
};
// -------------------------------------------------------------------

class Test1_FMapEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Test1_FMapEntry_DoNotUse, 
    ::google::protobuf::int32, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Test1_FMapEntry_DoNotUse, 
    ::google::protobuf::int32, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  Test1_FMapEntry_DoNotUse();
  Test1_FMapEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Test1_FMapEntry_DoNotUse& other);
  static const Test1_FMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Test1_FMapEntry_DoNotUse*>(&_Test1_FMapEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Test1 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Test1) */ {
 public:
  Test1();
  virtual ~Test1();

  Test1(const Test1& from);

  inline Test1& operator=(const Test1& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Test1(Test1&& from) noexcept
    : Test1() {
    *this = ::std::move(from);
  }

  inline Test1& operator=(Test1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test1& default_instance();

  enum FOneofCase {
    kFOneofF1 = 17,
    kFOneofF2 = 18,
    F_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test1* internal_default_instance() {
    return reinterpret_cast<const Test1*>(
               &_Test1_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Test1* other);
  friend void swap(Test1& a, Test1& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Test1* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test1>(NULL);
  }

  Test1* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test1>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Test1& from);
  void MergeFrom(const Test1& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Test1* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int32, int32> f_map = 16;
  int f_map_size() const;
  void clear_f_map();
  static const int kFMapFieldNumber = 16;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >&
      f_map() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >*
      mutable_f_map();

  // repeated double rf_double = 23;
  int rf_double_size() const;
  void clear_rf_double();
  static const int kRfDoubleFieldNumber = 23;
  double rf_double(int index) const;
  void set_rf_double(int index, double value);
  void add_rf_double(double value);
  const ::google::protobuf::RepeatedField< double >&
      rf_double() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_rf_double();

  // repeated float rf_float = 24;
  int rf_float_size() const;
  void clear_rf_float();
  static const int kRfFloatFieldNumber = 24;
  float rf_float(int index) const;
  void set_rf_float(int index, float value);
  void add_rf_float(float value);
  const ::google::protobuf::RepeatedField< float >&
      rf_float() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_rf_float();

  // repeated int32 rf_int32 = 25;
  int rf_int32_size() const;
  void clear_rf_int32();
  static const int kRfInt32FieldNumber = 25;
  ::google::protobuf::int32 rf_int32(int index) const;
  void set_rf_int32(int index, ::google::protobuf::int32 value);
  void add_rf_int32(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rf_int32() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rf_int32();

  // repeated int64 rf_int64 = 26;
  int rf_int64_size() const;
  void clear_rf_int64();
  static const int kRfInt64FieldNumber = 26;
  ::google::protobuf::int64 rf_int64(int index) const;
  void set_rf_int64(int index, ::google::protobuf::int64 value);
  void add_rf_int64(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      rf_int64() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_rf_int64();

  // repeated uint32 rf_uint32 = 27;
  int rf_uint32_size() const;
  void clear_rf_uint32();
  static const int kRfUint32FieldNumber = 27;
  ::google::protobuf::uint32 rf_uint32(int index) const;
  void set_rf_uint32(int index, ::google::protobuf::uint32 value);
  void add_rf_uint32(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rf_uint32() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rf_uint32();

  // repeated uint64 rf_uint64 = 28;
  int rf_uint64_size() const;
  void clear_rf_uint64();
  static const int kRfUint64FieldNumber = 28;
  ::google::protobuf::uint64 rf_uint64(int index) const;
  void set_rf_uint64(int index, ::google::protobuf::uint64 value);
  void add_rf_uint64(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      rf_uint64() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_rf_uint64();

  // repeated sint32 rf_sint32 = 29;
  int rf_sint32_size() const;
  void clear_rf_sint32();
  static const int kRfSint32FieldNumber = 29;
  ::google::protobuf::int32 rf_sint32(int index) const;
  void set_rf_sint32(int index, ::google::protobuf::int32 value);
  void add_rf_sint32(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rf_sint32() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rf_sint32();

  // repeated sint64 rf_sint64 = 30;
  int rf_sint64_size() const;
  void clear_rf_sint64();
  static const int kRfSint64FieldNumber = 30;
  ::google::protobuf::int64 rf_sint64(int index) const;
  void set_rf_sint64(int index, ::google::protobuf::int64 value);
  void add_rf_sint64(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      rf_sint64() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_rf_sint64();

  // repeated fixed32 rf_fixed32 = 31;
  int rf_fixed32_size() const;
  void clear_rf_fixed32();
  static const int kRfFixed32FieldNumber = 31;
  ::google::protobuf::uint32 rf_fixed32(int index) const;
  void set_rf_fixed32(int index, ::google::protobuf::uint32 value);
  void add_rf_fixed32(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rf_fixed32() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rf_fixed32();

  // repeated fixed64 rf_fixed64 = 32;
  int rf_fixed64_size() const;
  void clear_rf_fixed64();
  static const int kRfFixed64FieldNumber = 32;
  ::google::protobuf::uint64 rf_fixed64(int index) const;
  void set_rf_fixed64(int index, ::google::protobuf::uint64 value);
  void add_rf_fixed64(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      rf_fixed64() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_rf_fixed64();

  // repeated sfixed32 rf_sfixed32 = 33;
  int rf_sfixed32_size() const;
  void clear_rf_sfixed32();
  static const int kRfSfixed32FieldNumber = 33;
  ::google::protobuf::int32 rf_sfixed32(int index) const;
  void set_rf_sfixed32(int index, ::google::protobuf::int32 value);
  void add_rf_sfixed32(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rf_sfixed32() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rf_sfixed32();

  // repeated sfixed64 rf_sfixed64 = 34;
  int rf_sfixed64_size() const;
  void clear_rf_sfixed64();
  static const int kRfSfixed64FieldNumber = 34;
  ::google::protobuf::int64 rf_sfixed64(int index) const;
  void set_rf_sfixed64(int index, ::google::protobuf::int64 value);
  void add_rf_sfixed64(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      rf_sfixed64() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_rf_sfixed64();

  // repeated bool rf_bool = 35;
  int rf_bool_size() const;
  void clear_rf_bool();
  static const int kRfBoolFieldNumber = 35;
  bool rf_bool(int index) const;
  void set_rf_bool(int index, bool value);
  void add_rf_bool(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      rf_bool() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_rf_bool();

  // repeated string rf_string = 36;
  int rf_string_size() const;
  void clear_rf_string();
  static const int kRfStringFieldNumber = 36;
  const ::std::string& rf_string(int index) const;
  ::std::string* mutable_rf_string(int index);
  void set_rf_string(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_rf_string(int index, ::std::string&& value);
  #endif
  void set_rf_string(int index, const char* value);
  void set_rf_string(int index, const char* value, size_t size);
  ::std::string* add_rf_string();
  void add_rf_string(const ::std::string& value);
  #if LANG_CXX11
  void add_rf_string(::std::string&& value);
  #endif
  void add_rf_string(const char* value);
  void add_rf_string(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& rf_string() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_rf_string();

  // repeated bytes rf_bytes = 37;
  int rf_bytes_size() const;
  void clear_rf_bytes();
  static const int kRfBytesFieldNumber = 37;
  const ::std::string& rf_bytes(int index) const;
  ::std::string* mutable_rf_bytes(int index);
  void set_rf_bytes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_rf_bytes(int index, ::std::string&& value);
  #endif
  void set_rf_bytes(int index, const char* value);
  void set_rf_bytes(int index, const void* value, size_t size);
  ::std::string* add_rf_bytes();
  void add_rf_bytes(const ::std::string& value);
  #if LANG_CXX11
  void add_rf_bytes(::std::string&& value);
  #endif
  void add_rf_bytes(const char* value);
  void add_rf_bytes(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& rf_bytes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_rf_bytes();

  // repeated .Test0 rf_empty_out = 38;
  int rf_empty_out_size() const;
  void clear_rf_empty_out();
  static const int kRfEmptyOutFieldNumber = 38;
  ::Test0* mutable_rf_empty_out(int index);
  ::google::protobuf::RepeatedPtrField< ::Test0 >*
      mutable_rf_empty_out();
  const ::Test0& rf_empty_out(int index) const;
  ::Test0* add_rf_empty_out();
  const ::google::protobuf::RepeatedPtrField< ::Test0 >&
      rf_empty_out() const;

  // repeated .Enum0 rf_enum_out = 39;
  int rf_enum_out_size() const;
  void clear_rf_enum_out();
  static const int kRfEnumOutFieldNumber = 39;
  ::Enum0 rf_enum_out(int index) const;
  void set_rf_enum_out(int index, ::Enum0 value);
  void add_rf_enum_out(::Enum0 value);
  const ::google::protobuf::RepeatedField<int>& rf_enum_out() const;
  ::google::protobuf::RepeatedField<int>* mutable_rf_enum_out();

  // repeated .Test2.TestInner2 rf_empty_inner = 40;
  int rf_empty_inner_size() const;
  void clear_rf_empty_inner();
  static const int kRfEmptyInnerFieldNumber = 40;
  ::Test2_TestInner2* mutable_rf_empty_inner(int index);
  ::google::protobuf::RepeatedPtrField< ::Test2_TestInner2 >*
      mutable_rf_empty_inner();
  const ::Test2_TestInner2& rf_empty_inner(int index) const;
  ::Test2_TestInner2* add_rf_empty_inner();
  const ::google::protobuf::RepeatedPtrField< ::Test2_TestInner2 >&
      rf_empty_inner() const;

  // repeated .Test2.TestEnum rf_enum_inner = 41;
  int rf_enum_inner_size() const;
  void clear_rf_enum_inner();
  static const int kRfEnumInnerFieldNumber = 41;
  ::Test2_TestEnum rf_enum_inner(int index) const;
  void set_rf_enum_inner(int index, ::Test2_TestEnum value);
  void add_rf_enum_inner(::Test2_TestEnum value);
  const ::google::protobuf::RepeatedField<int>& rf_enum_inner() const;
  ::google::protobuf::RepeatedField<int>* mutable_rf_enum_inner();

  // repeated double rfu_double = 42 [packed = true];
  int rfu_double_size() const;
  void clear_rfu_double();
  static const int kRfuDoubleFieldNumber = 42;
  double rfu_double(int index) const;
  void set_rfu_double(int index, double value);
  void add_rfu_double(double value);
  const ::google::protobuf::RepeatedField< double >&
      rfu_double() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_rfu_double();

  // repeated float rfu_float = 43 [packed = true];
  int rfu_float_size() const;
  void clear_rfu_float();
  static const int kRfuFloatFieldNumber = 43;
  float rfu_float(int index) const;
  void set_rfu_float(int index, float value);
  void add_rfu_float(float value);
  const ::google::protobuf::RepeatedField< float >&
      rfu_float() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_rfu_float();

  // repeated int32 rfu_int32 = 44 [packed = true];
  int rfu_int32_size() const;
  void clear_rfu_int32();
  static const int kRfuInt32FieldNumber = 44;
  ::google::protobuf::int32 rfu_int32(int index) const;
  void set_rfu_int32(int index, ::google::protobuf::int32 value);
  void add_rfu_int32(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rfu_int32() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rfu_int32();

  // repeated int64 rfu_int64 = 45 [packed = true];
  int rfu_int64_size() const;
  void clear_rfu_int64();
  static const int kRfuInt64FieldNumber = 45;
  ::google::protobuf::int64 rfu_int64(int index) const;
  void set_rfu_int64(int index, ::google::protobuf::int64 value);
  void add_rfu_int64(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      rfu_int64() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_rfu_int64();

  // repeated uint32 rfu_uint32 = 46 [packed = true];
  int rfu_uint32_size() const;
  void clear_rfu_uint32();
  static const int kRfuUint32FieldNumber = 46;
  ::google::protobuf::uint32 rfu_uint32(int index) const;
  void set_rfu_uint32(int index, ::google::protobuf::uint32 value);
  void add_rfu_uint32(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rfu_uint32() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rfu_uint32();

  // repeated uint64 rfu_uint64 = 47 [packed = true];
  int rfu_uint64_size() const;
  void clear_rfu_uint64();
  static const int kRfuUint64FieldNumber = 47;
  ::google::protobuf::uint64 rfu_uint64(int index) const;
  void set_rfu_uint64(int index, ::google::protobuf::uint64 value);
  void add_rfu_uint64(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      rfu_uint64() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_rfu_uint64();

  // repeated sint32 rfu_sint32 = 48 [packed = true];
  int rfu_sint32_size() const;
  void clear_rfu_sint32();
  static const int kRfuSint32FieldNumber = 48;
  ::google::protobuf::int32 rfu_sint32(int index) const;
  void set_rfu_sint32(int index, ::google::protobuf::int32 value);
  void add_rfu_sint32(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rfu_sint32() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rfu_sint32();

  // repeated sint64 rfu_sint64 = 49 [packed = true];
  int rfu_sint64_size() const;
  void clear_rfu_sint64();
  static const int kRfuSint64FieldNumber = 49;
  ::google::protobuf::int64 rfu_sint64(int index) const;
  void set_rfu_sint64(int index, ::google::protobuf::int64 value);
  void add_rfu_sint64(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      rfu_sint64() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_rfu_sint64();

  // repeated fixed32 rfu_fixed32 = 50 [packed = true];
  int rfu_fixed32_size() const;
  void clear_rfu_fixed32();
  static const int kRfuFixed32FieldNumber = 50;
  ::google::protobuf::uint32 rfu_fixed32(int index) const;
  void set_rfu_fixed32(int index, ::google::protobuf::uint32 value);
  void add_rfu_fixed32(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rfu_fixed32() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rfu_fixed32();

  // repeated fixed64 rfu_fixed64 = 51 [packed = true];
  int rfu_fixed64_size() const;
  void clear_rfu_fixed64();
  static const int kRfuFixed64FieldNumber = 51;
  ::google::protobuf::uint64 rfu_fixed64(int index) const;
  void set_rfu_fixed64(int index, ::google::protobuf::uint64 value);
  void add_rfu_fixed64(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      rfu_fixed64() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_rfu_fixed64();

  // repeated sfixed32 rfu_sfixed32 = 52 [packed = true];
  int rfu_sfixed32_size() const;
  void clear_rfu_sfixed32();
  static const int kRfuSfixed32FieldNumber = 52;
  ::google::protobuf::int32 rfu_sfixed32(int index) const;
  void set_rfu_sfixed32(int index, ::google::protobuf::int32 value);
  void add_rfu_sfixed32(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rfu_sfixed32() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rfu_sfixed32();

  // repeated sfixed64 rfu_sfixed64 = 53 [packed = true];
  int rfu_sfixed64_size() const;
  void clear_rfu_sfixed64();
  static const int kRfuSfixed64FieldNumber = 53;
  ::google::protobuf::int64 rfu_sfixed64(int index) const;
  void set_rfu_sfixed64(int index, ::google::protobuf::int64 value);
  void add_rfu_sfixed64(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      rfu_sfixed64() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_rfu_sfixed64();

  // repeated bool rfu_bool = 54 [packed = true];
  int rfu_bool_size() const;
  void clear_rfu_bool();
  static const int kRfuBoolFieldNumber = 54;
  bool rfu_bool(int index) const;
  void set_rfu_bool(int index, bool value);
  void add_rfu_bool(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      rfu_bool() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_rfu_bool();

  // repeated .Test2.TestInner3.TestInner3_2 rf_inner = 55;
  int rf_inner_size() const;
  void clear_rf_inner();
  static const int kRfInnerFieldNumber = 55;
  ::Test2_TestInner3_TestInner3_2* mutable_rf_inner(int index);
  ::google::protobuf::RepeatedPtrField< ::Test2_TestInner3_TestInner3_2 >*
      mutable_rf_inner();
  const ::Test2_TestInner3_TestInner3_2& rf_inner(int index) const;
  ::Test2_TestInner3_TestInner3_2* add_rf_inner();
  const ::google::protobuf::RepeatedPtrField< ::Test2_TestInner3_TestInner3_2 >&
      rf_inner() const;

  // optional string f_string = 14;
  bool has_f_string() const;
  void clear_f_string();
  static const int kFStringFieldNumber = 14;
  const ::std::string& f_string() const;
  void set_f_string(const ::std::string& value);
  #if LANG_CXX11
  void set_f_string(::std::string&& value);
  #endif
  void set_f_string(const char* value);
  void set_f_string(const char* value, size_t size);
  ::std::string* mutable_f_string();
  ::std::string* release_f_string();
  void set_allocated_f_string(::std::string* f_string);

  // optional bytes f_bytes = 15;
  bool has_f_bytes() const;
  void clear_f_bytes();
  static const int kFBytesFieldNumber = 15;
  const ::std::string& f_bytes() const;
  void set_f_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_f_bytes(::std::string&& value);
  #endif
  void set_f_bytes(const char* value);
  void set_f_bytes(const void* value, size_t size);
  ::std::string* mutable_f_bytes();
  ::std::string* release_f_bytes();
  void set_allocated_f_bytes(::std::string* f_bytes);

  // optional .Test0 f_empty_out = 19;
  bool has_f_empty_out() const;
  void clear_f_empty_out();
  static const int kFEmptyOutFieldNumber = 19;
  const ::Test0& f_empty_out() const;
  ::Test0* release_f_empty_out();
  ::Test0* mutable_f_empty_out();
  void set_allocated_f_empty_out(::Test0* f_empty_out);

  // optional .Test2.TestInner2 f_empty_inner = 21;
  bool has_f_empty_inner() const;
  void clear_f_empty_inner();
  static const int kFEmptyInnerFieldNumber = 21;
  const ::Test2_TestInner2& f_empty_inner() const;
  ::Test2_TestInner2* release_f_empty_inner();
  ::Test2_TestInner2* mutable_f_empty_inner();
  void set_allocated_f_empty_inner(::Test2_TestInner2* f_empty_inner);

  // optional double f_double = 1;
  bool has_f_double() const;
  void clear_f_double();
  static const int kFDoubleFieldNumber = 1;
  double f_double() const;
  void set_f_double(double value);

  // optional float f_float = 2;
  bool has_f_float() const;
  void clear_f_float();
  static const int kFFloatFieldNumber = 2;
  float f_float() const;
  void set_f_float(float value);

  // optional int32 f_int32 = 3;
  bool has_f_int32() const;
  void clear_f_int32();
  static const int kFInt32FieldNumber = 3;
  ::google::protobuf::int32 f_int32() const;
  void set_f_int32(::google::protobuf::int32 value);

  // optional int64 f_int64 = 4;
  bool has_f_int64() const;
  void clear_f_int64();
  static const int kFInt64FieldNumber = 4;
  ::google::protobuf::int64 f_int64() const;
  void set_f_int64(::google::protobuf::int64 value);

  // optional uint64 f_uint64 = 6;
  bool has_f_uint64() const;
  void clear_f_uint64();
  static const int kFUint64FieldNumber = 6;
  ::google::protobuf::uint64 f_uint64() const;
  void set_f_uint64(::google::protobuf::uint64 value);

  // optional uint32 f_uint32 = 5;
  bool has_f_uint32() const;
  void clear_f_uint32();
  static const int kFUint32FieldNumber = 5;
  ::google::protobuf::uint32 f_uint32() const;
  void set_f_uint32(::google::protobuf::uint32 value);

  // optional sint32 f_sint32 = 7;
  bool has_f_sint32() const;
  void clear_f_sint32();
  static const int kFSint32FieldNumber = 7;
  ::google::protobuf::int32 f_sint32() const;
  void set_f_sint32(::google::protobuf::int32 value);

  // optional sint64 f_sint64 = 8;
  bool has_f_sint64() const;
  void clear_f_sint64();
  static const int kFSint64FieldNumber = 8;
  ::google::protobuf::int64 f_sint64() const;
  void set_f_sint64(::google::protobuf::int64 value);

  // optional fixed64 f_fixed64 = 10;
  bool has_f_fixed64() const;
  void clear_f_fixed64();
  static const int kFFixed64FieldNumber = 10;
  ::google::protobuf::uint64 f_fixed64() const;
  void set_f_fixed64(::google::protobuf::uint64 value);

  // optional fixed32 f_fixed32 = 9;
  bool has_f_fixed32() const;
  void clear_f_fixed32();
  static const int kFFixed32FieldNumber = 9;
  ::google::protobuf::uint32 f_fixed32() const;
  void set_f_fixed32(::google::protobuf::uint32 value);

  // optional sfixed32 f_sfixed32 = 11;
  bool has_f_sfixed32() const;
  void clear_f_sfixed32();
  static const int kFSfixed32FieldNumber = 11;
  ::google::protobuf::int32 f_sfixed32() const;
  void set_f_sfixed32(::google::protobuf::int32 value);

  // optional sfixed64 f_sfixed64 = 12;
  bool has_f_sfixed64() const;
  void clear_f_sfixed64();
  static const int kFSfixed64FieldNumber = 12;
  ::google::protobuf::int64 f_sfixed64() const;
  void set_f_sfixed64(::google::protobuf::int64 value);

  // optional bool f_bool = 13;
  bool has_f_bool() const;
  void clear_f_bool();
  static const int kFBoolFieldNumber = 13;
  bool f_bool() const;
  void set_f_bool(bool value);

  // optional .Enum0 f_enum_out = 20;
  bool has_f_enum_out() const;
  void clear_f_enum_out();
  static const int kFEnumOutFieldNumber = 20;
  ::Enum0 f_enum_out() const;
  void set_f_enum_out(::Enum0 value);

  // optional .Test2.TestEnum f_enum_inner = 22;
  bool has_f_enum_inner() const;
  void clear_f_enum_inner();
  static const int kFEnumInnerFieldNumber = 22;
  ::Test2_TestEnum f_enum_inner() const;
  void set_f_enum_inner(::Test2_TestEnum value);

  // optional string f_oneof_f1 = 17;
  bool has_f_oneof_f1() const;
  void clear_f_oneof_f1();
  static const int kFOneofF1FieldNumber = 17;
  const ::std::string& f_oneof_f1() const;
  void set_f_oneof_f1(const ::std::string& value);
  #if LANG_CXX11
  void set_f_oneof_f1(::std::string&& value);
  #endif
  void set_f_oneof_f1(const char* value);
  void set_f_oneof_f1(const char* value, size_t size);
  ::std::string* mutable_f_oneof_f1();
  ::std::string* release_f_oneof_f1();
  void set_allocated_f_oneof_f1(::std::string* f_oneof_f1);

  // optional int32 f_oneof_f2 = 18;
  bool has_f_oneof_f2() const;
  void clear_f_oneof_f2();
  static const int kFOneofF2FieldNumber = 18;
  ::google::protobuf::int32 f_oneof_f2() const;
  void set_f_oneof_f2(::google::protobuf::int32 value);

  FOneofCase f_oneof_case() const;
  // @@protoc_insertion_point(class_scope:Test1)
 private:
  void set_has_f_double();
  void clear_has_f_double();
  void set_has_f_float();
  void clear_has_f_float();
  void set_has_f_int32();
  void clear_has_f_int32();
  void set_has_f_int64();
  void clear_has_f_int64();
  void set_has_f_uint32();
  void clear_has_f_uint32();
  void set_has_f_uint64();
  void clear_has_f_uint64();
  void set_has_f_sint32();
  void clear_has_f_sint32();
  void set_has_f_sint64();
  void clear_has_f_sint64();
  void set_has_f_fixed32();
  void clear_has_f_fixed32();
  void set_has_f_fixed64();
  void clear_has_f_fixed64();
  void set_has_f_sfixed32();
  void clear_has_f_sfixed32();
  void set_has_f_sfixed64();
  void clear_has_f_sfixed64();
  void set_has_f_bool();
  void clear_has_f_bool();
  void set_has_f_string();
  void clear_has_f_string();
  void set_has_f_bytes();
  void clear_has_f_bytes();
  void set_has_f_oneof_f1();
  void set_has_f_oneof_f2();
  void set_has_f_empty_out();
  void clear_has_f_empty_out();
  void set_has_f_enum_out();
  void clear_has_f_enum_out();
  void set_has_f_empty_inner();
  void clear_has_f_empty_inner();
  void set_has_f_enum_inner();
  void clear_has_f_enum_inner();

  inline bool has_f_oneof() const;
  void clear_f_oneof();
  inline void clear_has_f_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::MapField<
      Test1_FMapEntry_DoNotUse,
      ::google::protobuf::int32, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 > f_map_;
  ::google::protobuf::RepeatedField< double > rf_double_;
  ::google::protobuf::RepeatedField< float > rf_float_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rf_int32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > rf_int64_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rf_uint32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > rf_uint64_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rf_sint32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > rf_sint64_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rf_fixed32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > rf_fixed64_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rf_sfixed32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > rf_sfixed64_;
  ::google::protobuf::RepeatedField< bool > rf_bool_;
  ::google::protobuf::RepeatedPtrField< ::std::string> rf_string_;
  ::google::protobuf::RepeatedPtrField< ::std::string> rf_bytes_;
  ::google::protobuf::RepeatedPtrField< ::Test0 > rf_empty_out_;
  ::google::protobuf::RepeatedField<int> rf_enum_out_;
  ::google::protobuf::RepeatedPtrField< ::Test2_TestInner2 > rf_empty_inner_;
  ::google::protobuf::RepeatedField<int> rf_enum_inner_;
  ::google::protobuf::RepeatedField< double > rfu_double_;
  mutable int _rfu_double_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > rfu_float_;
  mutable int _rfu_float_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rfu_int32_;
  mutable int _rfu_int32_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > rfu_int64_;
  mutable int _rfu_int64_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rfu_uint32_;
  mutable int _rfu_uint32_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > rfu_uint64_;
  mutable int _rfu_uint64_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rfu_sint32_;
  mutable int _rfu_sint32_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > rfu_sint64_;
  mutable int _rfu_sint64_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rfu_fixed32_;
  mutable int _rfu_fixed32_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > rfu_fixed64_;
  mutable int _rfu_fixed64_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rfu_sfixed32_;
  mutable int _rfu_sfixed32_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > rfu_sfixed64_;
  mutable int _rfu_sfixed64_cached_byte_size_;
  ::google::protobuf::RepeatedField< bool > rfu_bool_;
  mutable int _rfu_bool_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::Test2_TestInner3_TestInner3_2 > rf_inner_;
  ::google::protobuf::internal::ArenaStringPtr f_string_;
  ::google::protobuf::internal::ArenaStringPtr f_bytes_;
  ::Test0* f_empty_out_;
  ::Test2_TestInner2* f_empty_inner_;
  double f_double_;
  float f_float_;
  ::google::protobuf::int32 f_int32_;
  ::google::protobuf::int64 f_int64_;
  ::google::protobuf::uint64 f_uint64_;
  ::google::protobuf::uint32 f_uint32_;
  ::google::protobuf::int32 f_sint32_;
  ::google::protobuf::int64 f_sint64_;
  ::google::protobuf::uint64 f_fixed64_;
  ::google::protobuf::uint32 f_fixed32_;
  ::google::protobuf::int32 f_sfixed32_;
  ::google::protobuf::int64 f_sfixed64_;
  bool f_bool_;
  int f_enum_out_;
  int f_enum_inner_;
  union FOneofUnion {
    FOneofUnion() {}
    ::google::protobuf::internal::ArenaStringPtr f_oneof_f1_;
    ::google::protobuf::int32 f_oneof_f2_;
  } f_oneof_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_pbtest2_2eproto::TableStruct;
  friend void ::protobuf_pbtest2_2eproto::InitDefaultsTest1Impl();
};
// -------------------------------------------------------------------

class Test2_TestInner1 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Test2.TestInner1) */ {
 public:
  Test2_TestInner1();
  virtual ~Test2_TestInner1();

  Test2_TestInner1(const Test2_TestInner1& from);

  inline Test2_TestInner1& operator=(const Test2_TestInner1& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Test2_TestInner1(Test2_TestInner1&& from) noexcept
    : Test2_TestInner1() {
    *this = ::std::move(from);
  }

  inline Test2_TestInner1& operator=(Test2_TestInner1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test2_TestInner1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test2_TestInner1* internal_default_instance() {
    return reinterpret_cast<const Test2_TestInner1*>(
               &_Test2_TestInner1_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Test2_TestInner1* other);
  friend void swap(Test2_TestInner1& a, Test2_TestInner1& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Test2_TestInner1* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test2_TestInner1>(NULL);
  }

  Test2_TestInner1* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test2_TestInner1>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Test2_TestInner1& from);
  void MergeFrom(const Test2_TestInner1& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Test2_TestInner1* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double f1 = 1;
  int f1_size() const;
  void clear_f1();
  static const int kF1FieldNumber = 1;
  double f1(int index) const;
  void set_f1(int index, double value);
  void add_f1(double value);
  const ::google::protobuf::RepeatedField< double >&
      f1() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_f1();

  // optional string f3 = 3;
  bool has_f3() const;
  void clear_f3();
  static const int kF3FieldNumber = 3;
  const ::std::string& f3() const;
  void set_f3(const ::std::string& value);
  #if LANG_CXX11
  void set_f3(::std::string&& value);
  #endif
  void set_f3(const char* value);
  void set_f3(const char* value, size_t size);
  ::std::string* mutable_f3();
  ::std::string* release_f3();
  void set_allocated_f3(::std::string* f3);

  // optional float f2 = 2;
  bool has_f2() const;
  void clear_f2();
  static const int kF2FieldNumber = 2;
  float f2() const;
  void set_f2(float value);

  // @@protoc_insertion_point(class_scope:Test2.TestInner1)
 private:
  void set_has_f2();
  void clear_has_f2();
  void set_has_f3();
  void clear_has_f3();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > f1_;
  ::google::protobuf::internal::ArenaStringPtr f3_;
  float f2_;
  friend struct ::protobuf_pbtest2_2eproto::TableStruct;
  friend void ::protobuf_pbtest2_2eproto::InitDefaultsTest2_TestInner1Impl();
};
// -------------------------------------------------------------------

class Test2_TestInner2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Test2.TestInner2) */ {
 public:
  Test2_TestInner2();
  virtual ~Test2_TestInner2();

  Test2_TestInner2(const Test2_TestInner2& from);

  inline Test2_TestInner2& operator=(const Test2_TestInner2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Test2_TestInner2(Test2_TestInner2&& from) noexcept
    : Test2_TestInner2() {
    *this = ::std::move(from);
  }

  inline Test2_TestInner2& operator=(Test2_TestInner2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test2_TestInner2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test2_TestInner2* internal_default_instance() {
    return reinterpret_cast<const Test2_TestInner2*>(
               &_Test2_TestInner2_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Test2_TestInner2* other);
  friend void swap(Test2_TestInner2& a, Test2_TestInner2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Test2_TestInner2* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test2_TestInner2>(NULL);
  }

  Test2_TestInner2* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test2_TestInner2>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Test2_TestInner2& from);
  void MergeFrom(const Test2_TestInner2& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Test2_TestInner2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Test2.TestInner2)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_pbtest2_2eproto::TableStruct;
  friend void ::protobuf_pbtest2_2eproto::InitDefaultsTest2_TestInner2Impl();
};
// -------------------------------------------------------------------

class Test2_TestInner3_TestInner3_1 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Test2.TestInner3.TestInner3_1) */ {
 public:
  Test2_TestInner3_TestInner3_1();
  virtual ~Test2_TestInner3_TestInner3_1();

  Test2_TestInner3_TestInner3_1(const Test2_TestInner3_TestInner3_1& from);

  inline Test2_TestInner3_TestInner3_1& operator=(const Test2_TestInner3_TestInner3_1& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Test2_TestInner3_TestInner3_1(Test2_TestInner3_TestInner3_1&& from) noexcept
    : Test2_TestInner3_TestInner3_1() {
    *this = ::std::move(from);
  }

  inline Test2_TestInner3_TestInner3_1& operator=(Test2_TestInner3_TestInner3_1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test2_TestInner3_TestInner3_1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test2_TestInner3_TestInner3_1* internal_default_instance() {
    return reinterpret_cast<const Test2_TestInner3_TestInner3_1*>(
               &_Test2_TestInner3_TestInner3_1_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Test2_TestInner3_TestInner3_1* other);
  friend void swap(Test2_TestInner3_TestInner3_1& a, Test2_TestInner3_TestInner3_1& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Test2_TestInner3_TestInner3_1* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test2_TestInner3_TestInner3_1>(NULL);
  }

  Test2_TestInner3_TestInner3_1* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test2_TestInner3_TestInner3_1>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Test2_TestInner3_TestInner3_1& from);
  void MergeFrom(const Test2_TestInner3_TestInner3_1& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Test2_TestInner3_TestInner3_1* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Test2.TestInner3.TestInner3_1)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_pbtest2_2eproto::TableStruct;
  friend void ::protobuf_pbtest2_2eproto::InitDefaultsTest2_TestInner3_TestInner3_1Impl();
};
// -------------------------------------------------------------------

class Test2_TestInner3_TestInner3_2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Test2.TestInner3.TestInner3_2) */ {
 public:
  Test2_TestInner3_TestInner3_2();
  virtual ~Test2_TestInner3_TestInner3_2();

  Test2_TestInner3_TestInner3_2(const Test2_TestInner3_TestInner3_2& from);

  inline Test2_TestInner3_TestInner3_2& operator=(const Test2_TestInner3_TestInner3_2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Test2_TestInner3_TestInner3_2(Test2_TestInner3_TestInner3_2&& from) noexcept
    : Test2_TestInner3_TestInner3_2() {
    *this = ::std::move(from);
  }

  inline Test2_TestInner3_TestInner3_2& operator=(Test2_TestInner3_TestInner3_2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test2_TestInner3_TestInner3_2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test2_TestInner3_TestInner3_2* internal_default_instance() {
    return reinterpret_cast<const Test2_TestInner3_TestInner3_2*>(
               &_Test2_TestInner3_TestInner3_2_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Test2_TestInner3_TestInner3_2* other);
  friend void swap(Test2_TestInner3_TestInner3_2& a, Test2_TestInner3_TestInner3_2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Test2_TestInner3_TestInner3_2* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test2_TestInner3_TestInner3_2>(NULL);
  }

  Test2_TestInner3_TestInner3_2* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test2_TestInner3_TestInner3_2>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Test2_TestInner3_TestInner3_2& from);
  void MergeFrom(const Test2_TestInner3_TestInner3_2& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Test2_TestInner3_TestInner3_2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 f2 = 2;
  bool has_f2() const;
  void clear_f2();
  static const int kF2FieldNumber = 2;
  ::google::protobuf::uint64 f2() const;
  void set_f2(::google::protobuf::uint64 value);

  // optional int32 f1 = 1;
  bool has_f1() const;
  void clear_f1();
  static const int kF1FieldNumber = 1;
  ::google::protobuf::int32 f1() const;
  void set_f1(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Test2.TestInner3.TestInner3_2)
 private:
  void set_has_f1();
  void clear_has_f1();
  void set_has_f2();
  void clear_has_f2();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 f2_;
  ::google::protobuf::int32 f1_;
  friend struct ::protobuf_pbtest2_2eproto::TableStruct;
  friend void ::protobuf_pbtest2_2eproto::InitDefaultsTest2_TestInner3_TestInner3_2Impl();
};
// -------------------------------------------------------------------

class Test2_TestInner3_F1Entry_DoNotUse : public ::google::protobuf::internal::MapEntry<Test2_TestInner3_F1Entry_DoNotUse, 
    ::std::string, ::Test2_TestInner3_TestInner3_2,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Test2_TestInner3_F1Entry_DoNotUse, 
    ::std::string, ::Test2_TestInner3_TestInner3_2,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Test2_TestInner3_F1Entry_DoNotUse();
  Test2_TestInner3_F1Entry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Test2_TestInner3_F1Entry_DoNotUse& other);
  static const Test2_TestInner3_F1Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Test2_TestInner3_F1Entry_DoNotUse*>(&_Test2_TestInner3_F1Entry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Test2_TestInner3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Test2.TestInner3) */ {
 public:
  Test2_TestInner3();
  virtual ~Test2_TestInner3();

  Test2_TestInner3(const Test2_TestInner3& from);

  inline Test2_TestInner3& operator=(const Test2_TestInner3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Test2_TestInner3(Test2_TestInner3&& from) noexcept
    : Test2_TestInner3() {
    *this = ::std::move(from);
  }

  inline Test2_TestInner3& operator=(Test2_TestInner3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test2_TestInner3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test2_TestInner3* internal_default_instance() {
    return reinterpret_cast<const Test2_TestInner3*>(
               &_Test2_TestInner3_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Test2_TestInner3* other);
  friend void swap(Test2_TestInner3& a, Test2_TestInner3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Test2_TestInner3* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test2_TestInner3>(NULL);
  }

  Test2_TestInner3* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test2_TestInner3>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Test2_TestInner3& from);
  void MergeFrom(const Test2_TestInner3& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Test2_TestInner3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Test2_TestInner3_TestInner3_1 TestInner3_1;
  typedef Test2_TestInner3_TestInner3_2 TestInner3_2;

  // accessors -------------------------------------------------------

  // map<string, .Test2.TestInner3.TestInner3_2> f1 = 1;
  int f1_size() const;
  void clear_f1();
  static const int kF1FieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::Test2_TestInner3_TestInner3_2 >&
      f1() const;
  ::google::protobuf::Map< ::std::string, ::Test2_TestInner3_TestInner3_2 >*
      mutable_f1();

  // optional .Test2.TestInner3.TestInner3_1 f3 = 3;
  bool has_f3() const;
  void clear_f3();
  static const int kF3FieldNumber = 3;
  const ::Test2_TestInner3_TestInner3_1& f3() const;
  ::Test2_TestInner3_TestInner3_1* release_f3();
  ::Test2_TestInner3_TestInner3_1* mutable_f3();
  void set_allocated_f3(::Test2_TestInner3_TestInner3_1* f3);

  // optional .Test2.TestEnum f2 = 2;
  bool has_f2() const;
  void clear_f2();
  static const int kF2FieldNumber = 2;
  ::Test2_TestEnum f2() const;
  void set_f2(::Test2_TestEnum value);

  // @@protoc_insertion_point(class_scope:Test2.TestInner3)
 private:
  void set_has_f2();
  void clear_has_f2();
  void set_has_f3();
  void clear_has_f3();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::MapField<
      Test2_TestInner3_F1Entry_DoNotUse,
      ::std::string, ::Test2_TestInner3_TestInner3_2,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > f1_;
  ::Test2_TestInner3_TestInner3_1* f3_;
  int f2_;
  friend struct ::protobuf_pbtest2_2eproto::TableStruct;
  friend void ::protobuf_pbtest2_2eproto::InitDefaultsTest2_TestInner3Impl();
};
// -------------------------------------------------------------------

class Test2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Test2) */ {
 public:
  Test2();
  virtual ~Test2();

  Test2(const Test2& from);

  inline Test2& operator=(const Test2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Test2(Test2&& from) noexcept
    : Test2() {
    *this = ::std::move(from);
  }

  inline Test2& operator=(Test2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test2& default_instance();

  enum TestOneofCase {
    kF3 = 3,
    kF4 = 4,
    TEST_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test2* internal_default_instance() {
    return reinterpret_cast<const Test2*>(
               &_Test2_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Test2* other);
  friend void swap(Test2& a, Test2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Test2* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test2>(NULL);
  }

  Test2* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test2>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Test2& from);
  void MergeFrom(const Test2& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Test2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Test2_TestInner1 TestInner1;
  typedef Test2_TestInner2 TestInner2;
  typedef Test2_TestInner3 TestInner3;

  typedef Test2_TestEnum TestEnum;
  static const TestEnum VALUE_0 =
    Test2_TestEnum_VALUE_0;
  static const TestEnum VALUE_1 =
    Test2_TestEnum_VALUE_1;
  static const TestEnum VALUE_2 =
    Test2_TestEnum_VALUE_2;
  static const TestEnum VALUE_3 =
    Test2_TestEnum_VALUE_3;
  static inline bool TestEnum_IsValid(int value) {
    return Test2_TestEnum_IsValid(value);
  }
  static const TestEnum TestEnum_MIN =
    Test2_TestEnum_TestEnum_MIN;
  static const TestEnum TestEnum_MAX =
    Test2_TestEnum_TestEnum_MAX;
  static const int TestEnum_ARRAYSIZE =
    Test2_TestEnum_TestEnum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TestEnum_descriptor() {
    return Test2_TestEnum_descriptor();
  }
  static inline const ::std::string& TestEnum_Name(TestEnum value) {
    return Test2_TestEnum_Name(value);
  }
  static inline bool TestEnum_Parse(const ::std::string& name,
      TestEnum* value) {
    return Test2_TestEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string f1 = 1;
  int f1_size() const;
  void clear_f1();
  static const int kF1FieldNumber = 1;
  const ::std::string& f1(int index) const;
  ::std::string* mutable_f1(int index);
  void set_f1(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_f1(int index, ::std::string&& value);
  #endif
  void set_f1(int index, const char* value);
  void set_f1(int index, const char* value, size_t size);
  ::std::string* add_f1();
  void add_f1(const ::std::string& value);
  #if LANG_CXX11
  void add_f1(::std::string&& value);
  #endif
  void add_f1(const char* value);
  void add_f1(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& f1() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_f1();

  // optional .Test2.TestInner2 f5 = 5;
  bool has_f5() const;
  void clear_f5();
  static const int kF5FieldNumber = 5;
  const ::Test2_TestInner2& f5() const;
  ::Test2_TestInner2* release_f5();
  ::Test2_TestInner2* mutable_f5();
  void set_allocated_f5(::Test2_TestInner2* f5);

  // optional .Test2.TestInner3 f6 = 6;
  bool has_f6() const;
  void clear_f6();
  static const int kF6FieldNumber = 6;
  const ::Test2_TestInner3& f6() const;
  ::Test2_TestInner3* release_f6();
  ::Test2_TestInner3* mutable_f6();
  void set_allocated_f6(::Test2_TestInner3* f6);

  // optional .Test2.TestInner1 f7 = 7;
  bool has_f7() const;
  void clear_f7();
  static const int kF7FieldNumber = 7;
  const ::Test2_TestInner1& f7() const;
  ::Test2_TestInner1* release_f7();
  ::Test2_TestInner1* mutable_f7();
  void set_allocated_f7(::Test2_TestInner1* f7);

  // optional fixed64 f2 = 2;
  bool has_f2() const;
  void clear_f2();
  static const int kF2FieldNumber = 2;
  ::google::protobuf::uint64 f2() const;
  void set_f2(::google::protobuf::uint64 value);

  // optional string f3 = 3;
  bool has_f3() const;
  void clear_f3();
  static const int kF3FieldNumber = 3;
  const ::std::string& f3() const;
  void set_f3(const ::std::string& value);
  #if LANG_CXX11
  void set_f3(::std::string&& value);
  #endif
  void set_f3(const char* value);
  void set_f3(const char* value, size_t size);
  ::std::string* mutable_f3();
  ::std::string* release_f3();
  void set_allocated_f3(::std::string* f3);

  // optional .Test2.TestInner3 f4 = 4;
  bool has_f4() const;
  void clear_f4();
  static const int kF4FieldNumber = 4;
  const ::Test2_TestInner3& f4() const;
  ::Test2_TestInner3* release_f4();
  ::Test2_TestInner3* mutable_f4();
  void set_allocated_f4(::Test2_TestInner3* f4);

  TestOneofCase test_oneof_case() const;
  // @@protoc_insertion_point(class_scope:Test2)
 private:
  void set_has_f2();
  void clear_has_f2();
  void set_has_f3();
  void set_has_f4();
  void set_has_f5();
  void clear_has_f5();
  void set_has_f6();
  void clear_has_f6();
  void set_has_f7();
  void clear_has_f7();

  inline bool has_test_oneof() const;
  void clear_test_oneof();
  inline void clear_has_test_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> f1_;
  ::Test2_TestInner2* f5_;
  ::Test2_TestInner3* f6_;
  ::Test2_TestInner1* f7_;
  ::google::protobuf::uint64 f2_;
  union TestOneofUnion {
    TestOneofUnion() {}
    ::google::protobuf::internal::ArenaStringPtr f3_;
    ::Test2_TestInner3* f4_;
  } test_oneof_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_pbtest2_2eproto::TableStruct;
  friend void ::protobuf_pbtest2_2eproto::InitDefaultsTest2Impl();
};
// -------------------------------------------------------------------

class Test3_InnerReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Test3.InnerReq) */ {
 public:
  Test3_InnerReq();
  virtual ~Test3_InnerReq();

  Test3_InnerReq(const Test3_InnerReq& from);

  inline Test3_InnerReq& operator=(const Test3_InnerReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Test3_InnerReq(Test3_InnerReq&& from) noexcept
    : Test3_InnerReq() {
    *this = ::std::move(from);
  }

  inline Test3_InnerReq& operator=(Test3_InnerReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test3_InnerReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test3_InnerReq* internal_default_instance() {
    return reinterpret_cast<const Test3_InnerReq*>(
               &_Test3_InnerReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Test3_InnerReq* other);
  friend void swap(Test3_InnerReq& a, Test3_InnerReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Test3_InnerReq* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test3_InnerReq>(NULL);
  }

  Test3_InnerReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test3_InnerReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Test3_InnerReq& from);
  void MergeFrom(const Test3_InnerReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Test3_InnerReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 f1 = 1;
  bool has_f1() const;
  void clear_f1();
  static const int kF1FieldNumber = 1;
  ::google::protobuf::int32 f1() const;
  void set_f1(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Test3.InnerReq)
 private:
  void set_has_f1();
  void clear_has_f1();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 f1_;
  friend struct ::protobuf_pbtest2_2eproto::TableStruct;
  friend void ::protobuf_pbtest2_2eproto::InitDefaultsTest3_InnerReqImpl();
};
// -------------------------------------------------------------------

class Test3_InnerOpt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Test3.InnerOpt) */ {
 public:
  Test3_InnerOpt();
  virtual ~Test3_InnerOpt();

  Test3_InnerOpt(const Test3_InnerOpt& from);

  inline Test3_InnerOpt& operator=(const Test3_InnerOpt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Test3_InnerOpt(Test3_InnerOpt&& from) noexcept
    : Test3_InnerOpt() {
    *this = ::std::move(from);
  }

  inline Test3_InnerOpt& operator=(Test3_InnerOpt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test3_InnerOpt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test3_InnerOpt* internal_default_instance() {
    return reinterpret_cast<const Test3_InnerOpt*>(
               &_Test3_InnerOpt_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(Test3_InnerOpt* other);
  friend void swap(Test3_InnerOpt& a, Test3_InnerOpt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Test3_InnerOpt* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test3_InnerOpt>(NULL);
  }

  Test3_InnerOpt* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test3_InnerOpt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Test3_InnerOpt& from);
  void MergeFrom(const Test3_InnerOpt& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Test3_InnerOpt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 f1 = 1;
  bool has_f1() const;
  void clear_f1();
  static const int kF1FieldNumber = 1;
  ::google::protobuf::int32 f1() const;
  void set_f1(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Test3.InnerOpt)
 private:
  void set_has_f1();
  void clear_has_f1();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 f1_;
  friend struct ::protobuf_pbtest2_2eproto::TableStruct;
  friend void ::protobuf_pbtest2_2eproto::InitDefaultsTest3_InnerOptImpl();
};
// -------------------------------------------------------------------

class Test3_InnerRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Test3.InnerRep) */ {
 public:
  Test3_InnerRep();
  virtual ~Test3_InnerRep();

  Test3_InnerRep(const Test3_InnerRep& from);

  inline Test3_InnerRep& operator=(const Test3_InnerRep& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Test3_InnerRep(Test3_InnerRep&& from) noexcept
    : Test3_InnerRep() {
    *this = ::std::move(from);
  }

  inline Test3_InnerRep& operator=(Test3_InnerRep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test3_InnerRep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test3_InnerRep* internal_default_instance() {
    return reinterpret_cast<const Test3_InnerRep*>(
               &_Test3_InnerRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(Test3_InnerRep* other);
  friend void swap(Test3_InnerRep& a, Test3_InnerRep& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Test3_InnerRep* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test3_InnerRep>(NULL);
  }

  Test3_InnerRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test3_InnerRep>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Test3_InnerRep& from);
  void MergeFrom(const Test3_InnerRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Test3_InnerRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 f1 = 1;
  int f1_size() const;
  void clear_f1();
  static const int kF1FieldNumber = 1;
  ::google::protobuf::int32 f1(int index) const;
  void set_f1(int index, ::google::protobuf::int32 value);
  void add_f1(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      f1() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_f1();

  // @@protoc_insertion_point(class_scope:Test3.InnerRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > f1_;
  friend struct ::protobuf_pbtest2_2eproto::TableStruct;
  friend void ::protobuf_pbtest2_2eproto::InitDefaultsTest3_InnerRepImpl();
};
// -------------------------------------------------------------------

class Test3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Test3) */ {
 public:
  Test3();
  virtual ~Test3();

  Test3(const Test3& from);

  inline Test3& operator=(const Test3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Test3(Test3&& from) noexcept
    : Test3() {
    *this = ::std::move(from);
  }

  inline Test3& operator=(Test3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test3* internal_default_instance() {
    return reinterpret_cast<const Test3*>(
               &_Test3_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(Test3* other);
  friend void swap(Test3& a, Test3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Test3* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test3>(NULL);
  }

  Test3* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test3>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Test3& from);
  void MergeFrom(const Test3& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Test3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Test3_InnerReq InnerReq;
  typedef Test3_InnerOpt InnerOpt;
  typedef Test3_InnerRep InnerRep;

  // accessors -------------------------------------------------------

  // repeated int32 f_rep_int32 = 13;
  int f_rep_int32_size() const;
  void clear_f_rep_int32();
  static const int kFRepInt32FieldNumber = 13;
  ::google::protobuf::int32 f_rep_int32(int index) const;
  void set_f_rep_int32(int index, ::google::protobuf::int32 value);
  void add_f_rep_int32(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      f_rep_int32() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_f_rep_int32();

  // repeated float f_rep_float = 14;
  int f_rep_float_size() const;
  void clear_f_rep_float();
  static const int kFRepFloatFieldNumber = 14;
  float f_rep_float(int index) const;
  void set_f_rep_float(int index, float value);
  void add_f_rep_float(float value);
  const ::google::protobuf::RepeatedField< float >&
      f_rep_float() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_f_rep_float();

  // repeated string f_rep_string = 15;
  int f_rep_string_size() const;
  void clear_f_rep_string();
  static const int kFRepStringFieldNumber = 15;
  const ::std::string& f_rep_string(int index) const;
  ::std::string* mutable_f_rep_string(int index);
  void set_f_rep_string(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_f_rep_string(int index, ::std::string&& value);
  #endif
  void set_f_rep_string(int index, const char* value);
  void set_f_rep_string(int index, const char* value, size_t size);
  ::std::string* add_f_rep_string();
  void add_f_rep_string(const ::std::string& value);
  #if LANG_CXX11
  void add_f_rep_string(::std::string&& value);
  #endif
  void add_f_rep_string(const char* value);
  void add_f_rep_string(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& f_rep_string() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_f_rep_string();

  // repeated .Test3.InnerReq f_rep_inner_req = 16;
  int f_rep_inner_req_size() const;
  void clear_f_rep_inner_req();
  static const int kFRepInnerReqFieldNumber = 16;
  ::Test3_InnerReq* mutable_f_rep_inner_req(int index);
  ::google::protobuf::RepeatedPtrField< ::Test3_InnerReq >*
      mutable_f_rep_inner_req();
  const ::Test3_InnerReq& f_rep_inner_req(int index) const;
  ::Test3_InnerReq* add_f_rep_inner_req();
  const ::google::protobuf::RepeatedPtrField< ::Test3_InnerReq >&
      f_rep_inner_req() const;

  // repeated .Test3.InnerOpt f_rep_inner_opt = 17;
  int f_rep_inner_opt_size() const;
  void clear_f_rep_inner_opt();
  static const int kFRepInnerOptFieldNumber = 17;
  ::Test3_InnerOpt* mutable_f_rep_inner_opt(int index);
  ::google::protobuf::RepeatedPtrField< ::Test3_InnerOpt >*
      mutable_f_rep_inner_opt();
  const ::Test3_InnerOpt& f_rep_inner_opt(int index) const;
  ::Test3_InnerOpt* add_f_rep_inner_opt();
  const ::google::protobuf::RepeatedPtrField< ::Test3_InnerOpt >&
      f_rep_inner_opt() const;

  // repeated .Test3.InnerRep f_rep_inner_rep = 18;
  int f_rep_inner_rep_size() const;
  void clear_f_rep_inner_rep();
  static const int kFRepInnerRepFieldNumber = 18;
  ::Test3_InnerRep* mutable_f_rep_inner_rep(int index);
  ::google::protobuf::RepeatedPtrField< ::Test3_InnerRep >*
      mutable_f_rep_inner_rep();
  const ::Test3_InnerRep& f_rep_inner_rep(int index) const;
  ::Test3_InnerRep* add_f_rep_inner_rep();
  const ::google::protobuf::RepeatedPtrField< ::Test3_InnerRep >&
      f_rep_inner_rep() const;

  // required string f_req_string = 3;
  bool has_f_req_string() const;
  void clear_f_req_string();
  static const int kFReqStringFieldNumber = 3;
  const ::std::string& f_req_string() const;
  void set_f_req_string(const ::std::string& value);
  #if LANG_CXX11
  void set_f_req_string(::std::string&& value);
  #endif
  void set_f_req_string(const char* value);
  void set_f_req_string(const char* value, size_t size);
  ::std::string* mutable_f_req_string();
  ::std::string* release_f_req_string();
  void set_allocated_f_req_string(::std::string* f_req_string);

  // optional string f_opt_string = 9;
  bool has_f_opt_string() const;
  void clear_f_opt_string();
  static const int kFOptStringFieldNumber = 9;
  const ::std::string& f_opt_string() const;
  void set_f_opt_string(const ::std::string& value);
  #if LANG_CXX11
  void set_f_opt_string(::std::string&& value);
  #endif
  void set_f_opt_string(const char* value);
  void set_f_opt_string(const char* value, size_t size);
  ::std::string* mutable_f_opt_string();
  ::std::string* release_f_opt_string();
  void set_allocated_f_opt_string(::std::string* f_opt_string);

  // required .Test3.InnerReq f_req_inner_req = 4;
  bool has_f_req_inner_req() const;
  void clear_f_req_inner_req();
  static const int kFReqInnerReqFieldNumber = 4;
  const ::Test3_InnerReq& f_req_inner_req() const;
  ::Test3_InnerReq* release_f_req_inner_req();
  ::Test3_InnerReq* mutable_f_req_inner_req();
  void set_allocated_f_req_inner_req(::Test3_InnerReq* f_req_inner_req);

  // required .Test3.InnerOpt f_req_inner_opt = 5;
  bool has_f_req_inner_opt() const;
  void clear_f_req_inner_opt();
  static const int kFReqInnerOptFieldNumber = 5;
  const ::Test3_InnerOpt& f_req_inner_opt() const;
  ::Test3_InnerOpt* release_f_req_inner_opt();
  ::Test3_InnerOpt* mutable_f_req_inner_opt();
  void set_allocated_f_req_inner_opt(::Test3_InnerOpt* f_req_inner_opt);

  // required .Test3.InnerRep f_req_inner_rep = 6;
  bool has_f_req_inner_rep() const;
  void clear_f_req_inner_rep();
  static const int kFReqInnerRepFieldNumber = 6;
  const ::Test3_InnerRep& f_req_inner_rep() const;
  ::Test3_InnerRep* release_f_req_inner_rep();
  ::Test3_InnerRep* mutable_f_req_inner_rep();
  void set_allocated_f_req_inner_rep(::Test3_InnerRep* f_req_inner_rep);

  // optional .Test3.InnerReq f_opt_inner_req = 10;
  bool has_f_opt_inner_req() const;
  void clear_f_opt_inner_req();
  static const int kFOptInnerReqFieldNumber = 10;
  const ::Test3_InnerReq& f_opt_inner_req() const;
  ::Test3_InnerReq* release_f_opt_inner_req();
  ::Test3_InnerReq* mutable_f_opt_inner_req();
  void set_allocated_f_opt_inner_req(::Test3_InnerReq* f_opt_inner_req);

  // optional .Test3.InnerOpt f_opt_inner_opt = 11;
  bool has_f_opt_inner_opt() const;
  void clear_f_opt_inner_opt();
  static const int kFOptInnerOptFieldNumber = 11;
  const ::Test3_InnerOpt& f_opt_inner_opt() const;
  ::Test3_InnerOpt* release_f_opt_inner_opt();
  ::Test3_InnerOpt* mutable_f_opt_inner_opt();
  void set_allocated_f_opt_inner_opt(::Test3_InnerOpt* f_opt_inner_opt);

  // optional .Test3.InnerRep f_opt_inner_rep = 12;
  bool has_f_opt_inner_rep() const;
  void clear_f_opt_inner_rep();
  static const int kFOptInnerRepFieldNumber = 12;
  const ::Test3_InnerRep& f_opt_inner_rep() const;
  ::Test3_InnerRep* release_f_opt_inner_rep();
  ::Test3_InnerRep* mutable_f_opt_inner_rep();
  void set_allocated_f_opt_inner_rep(::Test3_InnerRep* f_opt_inner_rep);

  // required int32 f_req_int32 = 1;
  bool has_f_req_int32() const;
  void clear_f_req_int32();
  static const int kFReqInt32FieldNumber = 1;
  ::google::protobuf::int32 f_req_int32() const;
  void set_f_req_int32(::google::protobuf::int32 value);

  // required float f_req_float = 2;
  bool has_f_req_float() const;
  void clear_f_req_float();
  static const int kFReqFloatFieldNumber = 2;
  float f_req_float() const;
  void set_f_req_float(float value);

  // optional int32 f_opt_int32 = 7;
  bool has_f_opt_int32() const;
  void clear_f_opt_int32();
  static const int kFOptInt32FieldNumber = 7;
  ::google::protobuf::int32 f_opt_int32() const;
  void set_f_opt_int32(::google::protobuf::int32 value);

  // optional float f_opt_float = 8;
  bool has_f_opt_float() const;
  void clear_f_opt_float();
  static const int kFOptFloatFieldNumber = 8;
  float f_opt_float() const;
  void set_f_opt_float(float value);

  // @@protoc_insertion_point(class_scope:Test3)
 private:
  void set_has_f_req_int32();
  void clear_has_f_req_int32();
  void set_has_f_req_float();
  void clear_has_f_req_float();
  void set_has_f_req_string();
  void clear_has_f_req_string();
  void set_has_f_req_inner_req();
  void clear_has_f_req_inner_req();
  void set_has_f_req_inner_opt();
  void clear_has_f_req_inner_opt();
  void set_has_f_req_inner_rep();
  void clear_has_f_req_inner_rep();
  void set_has_f_opt_int32();
  void clear_has_f_opt_int32();
  void set_has_f_opt_float();
  void clear_has_f_opt_float();
  void set_has_f_opt_string();
  void clear_has_f_opt_string();
  void set_has_f_opt_inner_req();
  void clear_has_f_opt_inner_req();
  void set_has_f_opt_inner_opt();
  void clear_has_f_opt_inner_opt();
  void set_has_f_opt_inner_rep();
  void clear_has_f_opt_inner_rep();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > f_rep_int32_;
  ::google::protobuf::RepeatedField< float > f_rep_float_;
  ::google::protobuf::RepeatedPtrField< ::std::string> f_rep_string_;
  ::google::protobuf::RepeatedPtrField< ::Test3_InnerReq > f_rep_inner_req_;
  ::google::protobuf::RepeatedPtrField< ::Test3_InnerOpt > f_rep_inner_opt_;
  ::google::protobuf::RepeatedPtrField< ::Test3_InnerRep > f_rep_inner_rep_;
  ::google::protobuf::internal::ArenaStringPtr f_req_string_;
  ::google::protobuf::internal::ArenaStringPtr f_opt_string_;
  ::Test3_InnerReq* f_req_inner_req_;
  ::Test3_InnerOpt* f_req_inner_opt_;
  ::Test3_InnerRep* f_req_inner_rep_;
  ::Test3_InnerReq* f_opt_inner_req_;
  ::Test3_InnerOpt* f_opt_inner_opt_;
  ::Test3_InnerRep* f_opt_inner_rep_;
  ::google::protobuf::int32 f_req_int32_;
  float f_req_float_;
  ::google::protobuf::int32 f_opt_int32_;
  float f_opt_float_;
  friend struct ::protobuf_pbtest2_2eproto::TableStruct;
  friend void ::protobuf_pbtest2_2eproto::InitDefaultsTest3Impl();
};
// -------------------------------------------------------------------

class Test4_F5Entry_DoNotUse : public ::google::protobuf::internal::MapEntry<Test4_F5Entry_DoNotUse, 
    ::google::protobuf::int32, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Test4_F5Entry_DoNotUse, 
    ::google::protobuf::int32, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  Test4_F5Entry_DoNotUse();
  Test4_F5Entry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Test4_F5Entry_DoNotUse& other);
  static const Test4_F5Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Test4_F5Entry_DoNotUse*>(&_Test4_F5Entry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Test4 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Test4) */ {
 public:
  Test4();
  virtual ~Test4();

  Test4(const Test4& from);

  inline Test4& operator=(const Test4& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Test4(Test4&& from) noexcept
    : Test4() {
    *this = ::std::move(from);
  }

  inline Test4& operator=(Test4&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test4& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test4* internal_default_instance() {
    return reinterpret_cast<const Test4*>(
               &_Test4_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(Test4* other);
  friend void swap(Test4& a, Test4& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Test4* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test4>(NULL);
  }

  Test4* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Test4>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Test4& from);
  void MergeFrom(const Test4& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Test4* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int32, int32> f5 = 99;
  int f5_size() const;
  void clear_f5();
  static const int kF5FieldNumber = 99;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >&
      f5() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >*
      mutable_f5();

  // optional string f2 = 3;
  bool has_f2() const;
  void clear_f2();
  static const int kF2FieldNumber = 3;
  const ::std::string& f2() const;
  void set_f2(const ::std::string& value);
  #if LANG_CXX11
  void set_f2(::std::string&& value);
  #endif
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  ::std::string* mutable_f2();
  ::std::string* release_f2();
  void set_allocated_f2(::std::string* f2);

  // optional float f3 = 2;
  bool has_f3() const;
  void clear_f3();
  static const int kF3FieldNumber = 2;
  float f3() const;
  void set_f3(float value);

  // optional int32 f1 = 10;
  bool has_f1() const;
  void clear_f1();
  static const int kF1FieldNumber = 10;
  ::google::protobuf::int32 f1() const;
  void set_f1(::google::protobuf::int32 value);

  // optional double f4 = 160;
  bool has_f4() const;
  void clear_f4();
  static const int kF4FieldNumber = 160;
  double f4() const;
  void set_f4(double value);

  // @@protoc_insertion_point(class_scope:Test4)
 private:
  void set_has_f1();
  void clear_has_f1();
  void set_has_f2();
  void clear_has_f2();
  void set_has_f3();
  void clear_has_f3();
  void set_has_f4();
  void clear_has_f4();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::MapField<
      Test4_F5Entry_DoNotUse,
      ::google::protobuf::int32, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 > f5_;
  ::google::protobuf::internal::ArenaStringPtr f2_;
  float f3_;
  ::google::protobuf::int32 f1_;
  double f4_;
  friend struct ::protobuf_pbtest2_2eproto::TableStruct;
  friend void ::protobuf_pbtest2_2eproto::InitDefaultsTest4Impl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Test0

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Test1

// optional double f_double = 1;
inline bool Test1::has_f_double() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Test1::set_has_f_double() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Test1::clear_has_f_double() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Test1::clear_f_double() {
  f_double_ = 0;
  clear_has_f_double();
}
inline double Test1::f_double() const {
  // @@protoc_insertion_point(field_get:Test1.f_double)
  return f_double_;
}
inline void Test1::set_f_double(double value) {
  set_has_f_double();
  f_double_ = value;
  // @@protoc_insertion_point(field_set:Test1.f_double)
}

// optional float f_float = 2;
inline bool Test1::has_f_float() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Test1::set_has_f_float() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Test1::clear_has_f_float() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Test1::clear_f_float() {
  f_float_ = 0;
  clear_has_f_float();
}
inline float Test1::f_float() const {
  // @@protoc_insertion_point(field_get:Test1.f_float)
  return f_float_;
}
inline void Test1::set_f_float(float value) {
  set_has_f_float();
  f_float_ = value;
  // @@protoc_insertion_point(field_set:Test1.f_float)
}

// optional int32 f_int32 = 3;
inline bool Test1::has_f_int32() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Test1::set_has_f_int32() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Test1::clear_has_f_int32() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Test1::clear_f_int32() {
  f_int32_ = 0;
  clear_has_f_int32();
}
inline ::google::protobuf::int32 Test1::f_int32() const {
  // @@protoc_insertion_point(field_get:Test1.f_int32)
  return f_int32_;
}
inline void Test1::set_f_int32(::google::protobuf::int32 value) {
  set_has_f_int32();
  f_int32_ = value;
  // @@protoc_insertion_point(field_set:Test1.f_int32)
}

// optional int64 f_int64 = 4;
inline bool Test1::has_f_int64() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Test1::set_has_f_int64() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Test1::clear_has_f_int64() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Test1::clear_f_int64() {
  f_int64_ = GOOGLE_LONGLONG(0);
  clear_has_f_int64();
}
inline ::google::protobuf::int64 Test1::f_int64() const {
  // @@protoc_insertion_point(field_get:Test1.f_int64)
  return f_int64_;
}
inline void Test1::set_f_int64(::google::protobuf::int64 value) {
  set_has_f_int64();
  f_int64_ = value;
  // @@protoc_insertion_point(field_set:Test1.f_int64)
}

// optional uint32 f_uint32 = 5;
inline bool Test1::has_f_uint32() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Test1::set_has_f_uint32() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Test1::clear_has_f_uint32() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Test1::clear_f_uint32() {
  f_uint32_ = 0u;
  clear_has_f_uint32();
}
inline ::google::protobuf::uint32 Test1::f_uint32() const {
  // @@protoc_insertion_point(field_get:Test1.f_uint32)
  return f_uint32_;
}
inline void Test1::set_f_uint32(::google::protobuf::uint32 value) {
  set_has_f_uint32();
  f_uint32_ = value;
  // @@protoc_insertion_point(field_set:Test1.f_uint32)
}

// optional uint64 f_uint64 = 6;
inline bool Test1::has_f_uint64() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Test1::set_has_f_uint64() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Test1::clear_has_f_uint64() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Test1::clear_f_uint64() {
  f_uint64_ = GOOGLE_ULONGLONG(0);
  clear_has_f_uint64();
}
inline ::google::protobuf::uint64 Test1::f_uint64() const {
  // @@protoc_insertion_point(field_get:Test1.f_uint64)
  return f_uint64_;
}
inline void Test1::set_f_uint64(::google::protobuf::uint64 value) {
  set_has_f_uint64();
  f_uint64_ = value;
  // @@protoc_insertion_point(field_set:Test1.f_uint64)
}

// optional sint32 f_sint32 = 7;
inline bool Test1::has_f_sint32() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Test1::set_has_f_sint32() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Test1::clear_has_f_sint32() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Test1::clear_f_sint32() {
  f_sint32_ = 0;
  clear_has_f_sint32();
}
inline ::google::protobuf::int32 Test1::f_sint32() const {
  // @@protoc_insertion_point(field_get:Test1.f_sint32)
  return f_sint32_;
}
inline void Test1::set_f_sint32(::google::protobuf::int32 value) {
  set_has_f_sint32();
  f_sint32_ = value;
  // @@protoc_insertion_point(field_set:Test1.f_sint32)
}

// optional sint64 f_sint64 = 8;
inline bool Test1::has_f_sint64() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Test1::set_has_f_sint64() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Test1::clear_has_f_sint64() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Test1::clear_f_sint64() {
  f_sint64_ = GOOGLE_LONGLONG(0);
  clear_has_f_sint64();
}
inline ::google::protobuf::int64 Test1::f_sint64() const {
  // @@protoc_insertion_point(field_get:Test1.f_sint64)
  return f_sint64_;
}
inline void Test1::set_f_sint64(::google::protobuf::int64 value) {
  set_has_f_sint64();
  f_sint64_ = value;
  // @@protoc_insertion_point(field_set:Test1.f_sint64)
}

// optional fixed32 f_fixed32 = 9;
inline bool Test1::has_f_fixed32() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Test1::set_has_f_fixed32() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Test1::clear_has_f_fixed32() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Test1::clear_f_fixed32() {
  f_fixed32_ = 0u;
  clear_has_f_fixed32();
}
inline ::google::protobuf::uint32 Test1::f_fixed32() const {
  // @@protoc_insertion_point(field_get:Test1.f_fixed32)
  return f_fixed32_;
}
inline void Test1::set_f_fixed32(::google::protobuf::uint32 value) {
  set_has_f_fixed32();
  f_fixed32_ = value;
  // @@protoc_insertion_point(field_set:Test1.f_fixed32)
}

// optional fixed64 f_fixed64 = 10;
inline bool Test1::has_f_fixed64() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Test1::set_has_f_fixed64() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Test1::clear_has_f_fixed64() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Test1::clear_f_fixed64() {
  f_fixed64_ = GOOGLE_ULONGLONG(0);
  clear_has_f_fixed64();
}
inline ::google::protobuf::uint64 Test1::f_fixed64() const {
  // @@protoc_insertion_point(field_get:Test1.f_fixed64)
  return f_fixed64_;
}
inline void Test1::set_f_fixed64(::google::protobuf::uint64 value) {
  set_has_f_fixed64();
  f_fixed64_ = value;
  // @@protoc_insertion_point(field_set:Test1.f_fixed64)
}

// optional sfixed32 f_sfixed32 = 11;
inline bool Test1::has_f_sfixed32() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Test1::set_has_f_sfixed32() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Test1::clear_has_f_sfixed32() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Test1::clear_f_sfixed32() {
  f_sfixed32_ = 0;
  clear_has_f_sfixed32();
}
inline ::google::protobuf::int32 Test1::f_sfixed32() const {
  // @@protoc_insertion_point(field_get:Test1.f_sfixed32)
  return f_sfixed32_;
}
inline void Test1::set_f_sfixed32(::google::protobuf::int32 value) {
  set_has_f_sfixed32();
  f_sfixed32_ = value;
  // @@protoc_insertion_point(field_set:Test1.f_sfixed32)
}

// optional sfixed64 f_sfixed64 = 12;
inline bool Test1::has_f_sfixed64() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Test1::set_has_f_sfixed64() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Test1::clear_has_f_sfixed64() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Test1::clear_f_sfixed64() {
  f_sfixed64_ = GOOGLE_LONGLONG(0);
  clear_has_f_sfixed64();
}
inline ::google::protobuf::int64 Test1::f_sfixed64() const {
  // @@protoc_insertion_point(field_get:Test1.f_sfixed64)
  return f_sfixed64_;
}
inline void Test1::set_f_sfixed64(::google::protobuf::int64 value) {
  set_has_f_sfixed64();
  f_sfixed64_ = value;
  // @@protoc_insertion_point(field_set:Test1.f_sfixed64)
}

// optional bool f_bool = 13;
inline bool Test1::has_f_bool() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Test1::set_has_f_bool() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Test1::clear_has_f_bool() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Test1::clear_f_bool() {
  f_bool_ = false;
  clear_has_f_bool();
}
inline bool Test1::f_bool() const {
  // @@protoc_insertion_point(field_get:Test1.f_bool)
  return f_bool_;
}
inline void Test1::set_f_bool(bool value) {
  set_has_f_bool();
  f_bool_ = value;
  // @@protoc_insertion_point(field_set:Test1.f_bool)
}

// optional string f_string = 14;
inline bool Test1::has_f_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Test1::set_has_f_string() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Test1::clear_has_f_string() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Test1::clear_f_string() {
  f_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_f_string();
}
inline const ::std::string& Test1::f_string() const {
  // @@protoc_insertion_point(field_get:Test1.f_string)
  return f_string_.GetNoArena();
}
inline void Test1::set_f_string(const ::std::string& value) {
  set_has_f_string();
  f_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Test1.f_string)
}
#if LANG_CXX11
inline void Test1::set_f_string(::std::string&& value) {
  set_has_f_string();
  f_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Test1.f_string)
}
#endif
inline void Test1::set_f_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_f_string();
  f_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Test1.f_string)
}
inline void Test1::set_f_string(const char* value, size_t size) {
  set_has_f_string();
  f_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Test1.f_string)
}
inline ::std::string* Test1::mutable_f_string() {
  set_has_f_string();
  // @@protoc_insertion_point(field_mutable:Test1.f_string)
  return f_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Test1::release_f_string() {
  // @@protoc_insertion_point(field_release:Test1.f_string)
  clear_has_f_string();
  return f_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test1::set_allocated_f_string(::std::string* f_string) {
  if (f_string != NULL) {
    set_has_f_string();
  } else {
    clear_has_f_string();
  }
  f_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), f_string);
  // @@protoc_insertion_point(field_set_allocated:Test1.f_string)
}

// optional bytes f_bytes = 15;
inline bool Test1::has_f_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Test1::set_has_f_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Test1::clear_has_f_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Test1::clear_f_bytes() {
  f_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_f_bytes();
}
inline const ::std::string& Test1::f_bytes() const {
  // @@protoc_insertion_point(field_get:Test1.f_bytes)
  return f_bytes_.GetNoArena();
}
inline void Test1::set_f_bytes(const ::std::string& value) {
  set_has_f_bytes();
  f_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Test1.f_bytes)
}
#if LANG_CXX11
inline void Test1::set_f_bytes(::std::string&& value) {
  set_has_f_bytes();
  f_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Test1.f_bytes)
}
#endif
inline void Test1::set_f_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_f_bytes();
  f_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Test1.f_bytes)
}
inline void Test1::set_f_bytes(const void* value, size_t size) {
  set_has_f_bytes();
  f_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Test1.f_bytes)
}
inline ::std::string* Test1::mutable_f_bytes() {
  set_has_f_bytes();
  // @@protoc_insertion_point(field_mutable:Test1.f_bytes)
  return f_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Test1::release_f_bytes() {
  // @@protoc_insertion_point(field_release:Test1.f_bytes)
  clear_has_f_bytes();
  return f_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test1::set_allocated_f_bytes(::std::string* f_bytes) {
  if (f_bytes != NULL) {
    set_has_f_bytes();
  } else {
    clear_has_f_bytes();
  }
  f_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), f_bytes);
  // @@protoc_insertion_point(field_set_allocated:Test1.f_bytes)
}

// map<int32, int32> f_map = 16;
inline int Test1::f_map_size() const {
  return f_map_.size();
}
inline void Test1::clear_f_map() {
  f_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >&
Test1::f_map() const {
  // @@protoc_insertion_point(field_map:Test1.f_map)
  return f_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >*
Test1::mutable_f_map() {
  // @@protoc_insertion_point(field_mutable_map:Test1.f_map)
  return f_map_.MutableMap();
}

// optional string f_oneof_f1 = 17;
inline bool Test1::has_f_oneof_f1() const {
  return f_oneof_case() == kFOneofF1;
}
inline void Test1::set_has_f_oneof_f1() {
  _oneof_case_[0] = kFOneofF1;
}
inline void Test1::clear_f_oneof_f1() {
  if (has_f_oneof_f1()) {
    f_oneof_.f_oneof_f1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_f_oneof();
  }
}
inline const ::std::string& Test1::f_oneof_f1() const {
  // @@protoc_insertion_point(field_get:Test1.f_oneof_f1)
  if (has_f_oneof_f1()) {
    return f_oneof_.f_oneof_f1_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Test1::set_f_oneof_f1(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Test1.f_oneof_f1)
  if (!has_f_oneof_f1()) {
    clear_f_oneof();
    set_has_f_oneof_f1();
    f_oneof_.f_oneof_f1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  f_oneof_.f_oneof_f1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Test1.f_oneof_f1)
}
#if LANG_CXX11
inline void Test1::set_f_oneof_f1(::std::string&& value) {
  // @@protoc_insertion_point(field_set:Test1.f_oneof_f1)
  if (!has_f_oneof_f1()) {
    clear_f_oneof();
    set_has_f_oneof_f1();
    f_oneof_.f_oneof_f1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  f_oneof_.f_oneof_f1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Test1.f_oneof_f1)
}
#endif
inline void Test1::set_f_oneof_f1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_f_oneof_f1()) {
    clear_f_oneof();
    set_has_f_oneof_f1();
    f_oneof_.f_oneof_f1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  f_oneof_.f_oneof_f1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Test1.f_oneof_f1)
}
inline void Test1::set_f_oneof_f1(const char* value, size_t size) {
  if (!has_f_oneof_f1()) {
    clear_f_oneof();
    set_has_f_oneof_f1();
    f_oneof_.f_oneof_f1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  f_oneof_.f_oneof_f1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Test1.f_oneof_f1)
}
inline ::std::string* Test1::mutable_f_oneof_f1() {
  if (!has_f_oneof_f1()) {
    clear_f_oneof();
    set_has_f_oneof_f1();
    f_oneof_.f_oneof_f1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:Test1.f_oneof_f1)
  return f_oneof_.f_oneof_f1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Test1::release_f_oneof_f1() {
  // @@protoc_insertion_point(field_release:Test1.f_oneof_f1)
  if (has_f_oneof_f1()) {
    clear_has_f_oneof();
    return f_oneof_.f_oneof_f1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Test1::set_allocated_f_oneof_f1(::std::string* f_oneof_f1) {
  if (!has_f_oneof_f1()) {
    f_oneof_.f_oneof_f1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_f_oneof();
  if (f_oneof_f1 != NULL) {
    set_has_f_oneof_f1();
    f_oneof_.f_oneof_f1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), f_oneof_f1);
  }
  // @@protoc_insertion_point(field_set_allocated:Test1.f_oneof_f1)
}

// optional int32 f_oneof_f2 = 18;
inline bool Test1::has_f_oneof_f2() const {
  return f_oneof_case() == kFOneofF2;
}
inline void Test1::set_has_f_oneof_f2() {
  _oneof_case_[0] = kFOneofF2;
}
inline void Test1::clear_f_oneof_f2() {
  if (has_f_oneof_f2()) {
    f_oneof_.f_oneof_f2_ = 0;
    clear_has_f_oneof();
  }
}
inline ::google::protobuf::int32 Test1::f_oneof_f2() const {
  // @@protoc_insertion_point(field_get:Test1.f_oneof_f2)
  if (has_f_oneof_f2()) {
    return f_oneof_.f_oneof_f2_;
  }
  return 0;
}
inline void Test1::set_f_oneof_f2(::google::protobuf::int32 value) {
  if (!has_f_oneof_f2()) {
    clear_f_oneof();
    set_has_f_oneof_f2();
  }
  f_oneof_.f_oneof_f2_ = value;
  // @@protoc_insertion_point(field_set:Test1.f_oneof_f2)
}

// optional .Test0 f_empty_out = 19;
inline bool Test1::has_f_empty_out() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Test1::set_has_f_empty_out() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Test1::clear_has_f_empty_out() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Test1::clear_f_empty_out() {
  if (f_empty_out_ != NULL) f_empty_out_->Clear();
  clear_has_f_empty_out();
}
inline const ::Test0& Test1::f_empty_out() const {
  const ::Test0* p = f_empty_out_;
  // @@protoc_insertion_point(field_get:Test1.f_empty_out)
  return p != NULL ? *p : *reinterpret_cast<const ::Test0*>(
      &::_Test0_default_instance_);
}
inline ::Test0* Test1::release_f_empty_out() {
  // @@protoc_insertion_point(field_release:Test1.f_empty_out)
  clear_has_f_empty_out();
  ::Test0* temp = f_empty_out_;
  f_empty_out_ = NULL;
  return temp;
}
inline ::Test0* Test1::mutable_f_empty_out() {
  set_has_f_empty_out();
  if (f_empty_out_ == NULL) {
    f_empty_out_ = ::google::protobuf::Arena::Create< ::Test0 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Test1.f_empty_out)
  return f_empty_out_;
}
inline void Test1::set_allocated_f_empty_out(::Test0* f_empty_out) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete f_empty_out_;
  }
  if (f_empty_out) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      f_empty_out = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, f_empty_out, submessage_arena);
    }
    set_has_f_empty_out();
  } else {
    clear_has_f_empty_out();
  }
  f_empty_out_ = f_empty_out;
  // @@protoc_insertion_point(field_set_allocated:Test1.f_empty_out)
}

// optional .Enum0 f_enum_out = 20;
inline bool Test1::has_f_enum_out() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Test1::set_has_f_enum_out() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Test1::clear_has_f_enum_out() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Test1::clear_f_enum_out() {
  f_enum_out_ = 0;
  clear_has_f_enum_out();
}
inline ::Enum0 Test1::f_enum_out() const {
  // @@protoc_insertion_point(field_get:Test1.f_enum_out)
  return static_cast< ::Enum0 >(f_enum_out_);
}
inline void Test1::set_f_enum_out(::Enum0 value) {
  assert(::Enum0_IsValid(value));
  set_has_f_enum_out();
  f_enum_out_ = value;
  // @@protoc_insertion_point(field_set:Test1.f_enum_out)
}

// optional .Test2.TestInner2 f_empty_inner = 21;
inline bool Test1::has_f_empty_inner() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Test1::set_has_f_empty_inner() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Test1::clear_has_f_empty_inner() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Test1::clear_f_empty_inner() {
  if (f_empty_inner_ != NULL) f_empty_inner_->Clear();
  clear_has_f_empty_inner();
}
inline const ::Test2_TestInner2& Test1::f_empty_inner() const {
  const ::Test2_TestInner2* p = f_empty_inner_;
  // @@protoc_insertion_point(field_get:Test1.f_empty_inner)
  return p != NULL ? *p : *reinterpret_cast<const ::Test2_TestInner2*>(
      &::_Test2_TestInner2_default_instance_);
}
inline ::Test2_TestInner2* Test1::release_f_empty_inner() {
  // @@protoc_insertion_point(field_release:Test1.f_empty_inner)
  clear_has_f_empty_inner();
  ::Test2_TestInner2* temp = f_empty_inner_;
  f_empty_inner_ = NULL;
  return temp;
}
inline ::Test2_TestInner2* Test1::mutable_f_empty_inner() {
  set_has_f_empty_inner();
  if (f_empty_inner_ == NULL) {
    f_empty_inner_ = ::google::protobuf::Arena::Create< ::Test2_TestInner2 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Test1.f_empty_inner)
  return f_empty_inner_;
}
inline void Test1::set_allocated_f_empty_inner(::Test2_TestInner2* f_empty_inner) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete f_empty_inner_;
  }
  if (f_empty_inner) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      f_empty_inner = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, f_empty_inner, submessage_arena);
    }
    set_has_f_empty_inner();
  } else {
    clear_has_f_empty_inner();
  }
  f_empty_inner_ = f_empty_inner;
  // @@protoc_insertion_point(field_set_allocated:Test1.f_empty_inner)
}

// optional .Test2.TestEnum f_enum_inner = 22;
inline bool Test1::has_f_enum_inner() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Test1::set_has_f_enum_inner() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Test1::clear_has_f_enum_inner() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Test1::clear_f_enum_inner() {
  f_enum_inner_ = 0;
  clear_has_f_enum_inner();
}
inline ::Test2_TestEnum Test1::f_enum_inner() const {
  // @@protoc_insertion_point(field_get:Test1.f_enum_inner)
  return static_cast< ::Test2_TestEnum >(f_enum_inner_);
}
inline void Test1::set_f_enum_inner(::Test2_TestEnum value) {
  assert(::Test2_TestEnum_IsValid(value));
  set_has_f_enum_inner();
  f_enum_inner_ = value;
  // @@protoc_insertion_point(field_set:Test1.f_enum_inner)
}

// repeated double rf_double = 23;
inline int Test1::rf_double_size() const {
  return rf_double_.size();
}
inline void Test1::clear_rf_double() {
  rf_double_.Clear();
}
inline double Test1::rf_double(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rf_double)
  return rf_double_.Get(index);
}
inline void Test1::set_rf_double(int index, double value) {
  rf_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rf_double)
}
inline void Test1::add_rf_double(double value) {
  rf_double_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rf_double)
}
inline const ::google::protobuf::RepeatedField< double >&
Test1::rf_double() const {
  // @@protoc_insertion_point(field_list:Test1.rf_double)
  return rf_double_;
}
inline ::google::protobuf::RepeatedField< double >*
Test1::mutable_rf_double() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rf_double)
  return &rf_double_;
}

// repeated float rf_float = 24;
inline int Test1::rf_float_size() const {
  return rf_float_.size();
}
inline void Test1::clear_rf_float() {
  rf_float_.Clear();
}
inline float Test1::rf_float(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rf_float)
  return rf_float_.Get(index);
}
inline void Test1::set_rf_float(int index, float value) {
  rf_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rf_float)
}
inline void Test1::add_rf_float(float value) {
  rf_float_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rf_float)
}
inline const ::google::protobuf::RepeatedField< float >&
Test1::rf_float() const {
  // @@protoc_insertion_point(field_list:Test1.rf_float)
  return rf_float_;
}
inline ::google::protobuf::RepeatedField< float >*
Test1::mutable_rf_float() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rf_float)
  return &rf_float_;
}

// repeated int32 rf_int32 = 25;
inline int Test1::rf_int32_size() const {
  return rf_int32_.size();
}
inline void Test1::clear_rf_int32() {
  rf_int32_.Clear();
}
inline ::google::protobuf::int32 Test1::rf_int32(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rf_int32)
  return rf_int32_.Get(index);
}
inline void Test1::set_rf_int32(int index, ::google::protobuf::int32 value) {
  rf_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rf_int32)
}
inline void Test1::add_rf_int32(::google::protobuf::int32 value) {
  rf_int32_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rf_int32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Test1::rf_int32() const {
  // @@protoc_insertion_point(field_list:Test1.rf_int32)
  return rf_int32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Test1::mutable_rf_int32() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rf_int32)
  return &rf_int32_;
}

// repeated int64 rf_int64 = 26;
inline int Test1::rf_int64_size() const {
  return rf_int64_.size();
}
inline void Test1::clear_rf_int64() {
  rf_int64_.Clear();
}
inline ::google::protobuf::int64 Test1::rf_int64(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rf_int64)
  return rf_int64_.Get(index);
}
inline void Test1::set_rf_int64(int index, ::google::protobuf::int64 value) {
  rf_int64_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rf_int64)
}
inline void Test1::add_rf_int64(::google::protobuf::int64 value) {
  rf_int64_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rf_int64)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Test1::rf_int64() const {
  // @@protoc_insertion_point(field_list:Test1.rf_int64)
  return rf_int64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Test1::mutable_rf_int64() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rf_int64)
  return &rf_int64_;
}

// repeated uint32 rf_uint32 = 27;
inline int Test1::rf_uint32_size() const {
  return rf_uint32_.size();
}
inline void Test1::clear_rf_uint32() {
  rf_uint32_.Clear();
}
inline ::google::protobuf::uint32 Test1::rf_uint32(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rf_uint32)
  return rf_uint32_.Get(index);
}
inline void Test1::set_rf_uint32(int index, ::google::protobuf::uint32 value) {
  rf_uint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rf_uint32)
}
inline void Test1::add_rf_uint32(::google::protobuf::uint32 value) {
  rf_uint32_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rf_uint32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Test1::rf_uint32() const {
  // @@protoc_insertion_point(field_list:Test1.rf_uint32)
  return rf_uint32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Test1::mutable_rf_uint32() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rf_uint32)
  return &rf_uint32_;
}

// repeated uint64 rf_uint64 = 28;
inline int Test1::rf_uint64_size() const {
  return rf_uint64_.size();
}
inline void Test1::clear_rf_uint64() {
  rf_uint64_.Clear();
}
inline ::google::protobuf::uint64 Test1::rf_uint64(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rf_uint64)
  return rf_uint64_.Get(index);
}
inline void Test1::set_rf_uint64(int index, ::google::protobuf::uint64 value) {
  rf_uint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rf_uint64)
}
inline void Test1::add_rf_uint64(::google::protobuf::uint64 value) {
  rf_uint64_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rf_uint64)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Test1::rf_uint64() const {
  // @@protoc_insertion_point(field_list:Test1.rf_uint64)
  return rf_uint64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Test1::mutable_rf_uint64() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rf_uint64)
  return &rf_uint64_;
}

// repeated sint32 rf_sint32 = 29;
inline int Test1::rf_sint32_size() const {
  return rf_sint32_.size();
}
inline void Test1::clear_rf_sint32() {
  rf_sint32_.Clear();
}
inline ::google::protobuf::int32 Test1::rf_sint32(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rf_sint32)
  return rf_sint32_.Get(index);
}
inline void Test1::set_rf_sint32(int index, ::google::protobuf::int32 value) {
  rf_sint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rf_sint32)
}
inline void Test1::add_rf_sint32(::google::protobuf::int32 value) {
  rf_sint32_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rf_sint32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Test1::rf_sint32() const {
  // @@protoc_insertion_point(field_list:Test1.rf_sint32)
  return rf_sint32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Test1::mutable_rf_sint32() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rf_sint32)
  return &rf_sint32_;
}

// repeated sint64 rf_sint64 = 30;
inline int Test1::rf_sint64_size() const {
  return rf_sint64_.size();
}
inline void Test1::clear_rf_sint64() {
  rf_sint64_.Clear();
}
inline ::google::protobuf::int64 Test1::rf_sint64(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rf_sint64)
  return rf_sint64_.Get(index);
}
inline void Test1::set_rf_sint64(int index, ::google::protobuf::int64 value) {
  rf_sint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rf_sint64)
}
inline void Test1::add_rf_sint64(::google::protobuf::int64 value) {
  rf_sint64_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rf_sint64)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Test1::rf_sint64() const {
  // @@protoc_insertion_point(field_list:Test1.rf_sint64)
  return rf_sint64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Test1::mutable_rf_sint64() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rf_sint64)
  return &rf_sint64_;
}

// repeated fixed32 rf_fixed32 = 31;
inline int Test1::rf_fixed32_size() const {
  return rf_fixed32_.size();
}
inline void Test1::clear_rf_fixed32() {
  rf_fixed32_.Clear();
}
inline ::google::protobuf::uint32 Test1::rf_fixed32(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rf_fixed32)
  return rf_fixed32_.Get(index);
}
inline void Test1::set_rf_fixed32(int index, ::google::protobuf::uint32 value) {
  rf_fixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rf_fixed32)
}
inline void Test1::add_rf_fixed32(::google::protobuf::uint32 value) {
  rf_fixed32_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rf_fixed32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Test1::rf_fixed32() const {
  // @@protoc_insertion_point(field_list:Test1.rf_fixed32)
  return rf_fixed32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Test1::mutable_rf_fixed32() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rf_fixed32)
  return &rf_fixed32_;
}

// repeated fixed64 rf_fixed64 = 32;
inline int Test1::rf_fixed64_size() const {
  return rf_fixed64_.size();
}
inline void Test1::clear_rf_fixed64() {
  rf_fixed64_.Clear();
}
inline ::google::protobuf::uint64 Test1::rf_fixed64(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rf_fixed64)
  return rf_fixed64_.Get(index);
}
inline void Test1::set_rf_fixed64(int index, ::google::protobuf::uint64 value) {
  rf_fixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rf_fixed64)
}
inline void Test1::add_rf_fixed64(::google::protobuf::uint64 value) {
  rf_fixed64_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rf_fixed64)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Test1::rf_fixed64() const {
  // @@protoc_insertion_point(field_list:Test1.rf_fixed64)
  return rf_fixed64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Test1::mutable_rf_fixed64() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rf_fixed64)
  return &rf_fixed64_;
}

// repeated sfixed32 rf_sfixed32 = 33;
inline int Test1::rf_sfixed32_size() const {
  return rf_sfixed32_.size();
}
inline void Test1::clear_rf_sfixed32() {
  rf_sfixed32_.Clear();
}
inline ::google::protobuf::int32 Test1::rf_sfixed32(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rf_sfixed32)
  return rf_sfixed32_.Get(index);
}
inline void Test1::set_rf_sfixed32(int index, ::google::protobuf::int32 value) {
  rf_sfixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rf_sfixed32)
}
inline void Test1::add_rf_sfixed32(::google::protobuf::int32 value) {
  rf_sfixed32_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rf_sfixed32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Test1::rf_sfixed32() const {
  // @@protoc_insertion_point(field_list:Test1.rf_sfixed32)
  return rf_sfixed32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Test1::mutable_rf_sfixed32() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rf_sfixed32)
  return &rf_sfixed32_;
}

// repeated sfixed64 rf_sfixed64 = 34;
inline int Test1::rf_sfixed64_size() const {
  return rf_sfixed64_.size();
}
inline void Test1::clear_rf_sfixed64() {
  rf_sfixed64_.Clear();
}
inline ::google::protobuf::int64 Test1::rf_sfixed64(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rf_sfixed64)
  return rf_sfixed64_.Get(index);
}
inline void Test1::set_rf_sfixed64(int index, ::google::protobuf::int64 value) {
  rf_sfixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rf_sfixed64)
}
inline void Test1::add_rf_sfixed64(::google::protobuf::int64 value) {
  rf_sfixed64_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rf_sfixed64)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Test1::rf_sfixed64() const {
  // @@protoc_insertion_point(field_list:Test1.rf_sfixed64)
  return rf_sfixed64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Test1::mutable_rf_sfixed64() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rf_sfixed64)
  return &rf_sfixed64_;
}

// repeated bool rf_bool = 35;
inline int Test1::rf_bool_size() const {
  return rf_bool_.size();
}
inline void Test1::clear_rf_bool() {
  rf_bool_.Clear();
}
inline bool Test1::rf_bool(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rf_bool)
  return rf_bool_.Get(index);
}
inline void Test1::set_rf_bool(int index, bool value) {
  rf_bool_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rf_bool)
}
inline void Test1::add_rf_bool(bool value) {
  rf_bool_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rf_bool)
}
inline const ::google::protobuf::RepeatedField< bool >&
Test1::rf_bool() const {
  // @@protoc_insertion_point(field_list:Test1.rf_bool)
  return rf_bool_;
}
inline ::google::protobuf::RepeatedField< bool >*
Test1::mutable_rf_bool() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rf_bool)
  return &rf_bool_;
}

// repeated string rf_string = 36;
inline int Test1::rf_string_size() const {
  return rf_string_.size();
}
inline void Test1::clear_rf_string() {
  rf_string_.Clear();
}
inline const ::std::string& Test1::rf_string(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rf_string)
  return rf_string_.Get(index);
}
inline ::std::string* Test1::mutable_rf_string(int index) {
  // @@protoc_insertion_point(field_mutable:Test1.rf_string)
  return rf_string_.Mutable(index);
}
inline void Test1::set_rf_string(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Test1.rf_string)
  rf_string_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Test1::set_rf_string(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Test1.rf_string)
  rf_string_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Test1::set_rf_string(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  rf_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Test1.rf_string)
}
inline void Test1::set_rf_string(int index, const char* value, size_t size) {
  rf_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Test1.rf_string)
}
inline ::std::string* Test1::add_rf_string() {
  // @@protoc_insertion_point(field_add_mutable:Test1.rf_string)
  return rf_string_.Add();
}
inline void Test1::add_rf_string(const ::std::string& value) {
  rf_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Test1.rf_string)
}
#if LANG_CXX11
inline void Test1::add_rf_string(::std::string&& value) {
  rf_string_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Test1.rf_string)
}
#endif
inline void Test1::add_rf_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  rf_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Test1.rf_string)
}
inline void Test1::add_rf_string(const char* value, size_t size) {
  rf_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Test1.rf_string)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Test1::rf_string() const {
  // @@protoc_insertion_point(field_list:Test1.rf_string)
  return rf_string_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Test1::mutable_rf_string() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rf_string)
  return &rf_string_;
}

// repeated bytes rf_bytes = 37;
inline int Test1::rf_bytes_size() const {
  return rf_bytes_.size();
}
inline void Test1::clear_rf_bytes() {
  rf_bytes_.Clear();
}
inline const ::std::string& Test1::rf_bytes(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rf_bytes)
  return rf_bytes_.Get(index);
}
inline ::std::string* Test1::mutable_rf_bytes(int index) {
  // @@protoc_insertion_point(field_mutable:Test1.rf_bytes)
  return rf_bytes_.Mutable(index);
}
inline void Test1::set_rf_bytes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Test1.rf_bytes)
  rf_bytes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Test1::set_rf_bytes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Test1.rf_bytes)
  rf_bytes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Test1::set_rf_bytes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  rf_bytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Test1.rf_bytes)
}
inline void Test1::set_rf_bytes(int index, const void* value, size_t size) {
  rf_bytes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Test1.rf_bytes)
}
inline ::std::string* Test1::add_rf_bytes() {
  // @@protoc_insertion_point(field_add_mutable:Test1.rf_bytes)
  return rf_bytes_.Add();
}
inline void Test1::add_rf_bytes(const ::std::string& value) {
  rf_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Test1.rf_bytes)
}
#if LANG_CXX11
inline void Test1::add_rf_bytes(::std::string&& value) {
  rf_bytes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Test1.rf_bytes)
}
#endif
inline void Test1::add_rf_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  rf_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Test1.rf_bytes)
}
inline void Test1::add_rf_bytes(const void* value, size_t size) {
  rf_bytes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Test1.rf_bytes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Test1::rf_bytes() const {
  // @@protoc_insertion_point(field_list:Test1.rf_bytes)
  return rf_bytes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Test1::mutable_rf_bytes() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rf_bytes)
  return &rf_bytes_;
}

// repeated .Test0 rf_empty_out = 38;
inline int Test1::rf_empty_out_size() const {
  return rf_empty_out_.size();
}
inline void Test1::clear_rf_empty_out() {
  rf_empty_out_.Clear();
}
inline ::Test0* Test1::mutable_rf_empty_out(int index) {
  // @@protoc_insertion_point(field_mutable:Test1.rf_empty_out)
  return rf_empty_out_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Test0 >*
Test1::mutable_rf_empty_out() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rf_empty_out)
  return &rf_empty_out_;
}
inline const ::Test0& Test1::rf_empty_out(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rf_empty_out)
  return rf_empty_out_.Get(index);
}
inline ::Test0* Test1::add_rf_empty_out() {
  // @@protoc_insertion_point(field_add:Test1.rf_empty_out)
  return rf_empty_out_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Test0 >&
Test1::rf_empty_out() const {
  // @@protoc_insertion_point(field_list:Test1.rf_empty_out)
  return rf_empty_out_;
}

// repeated .Enum0 rf_enum_out = 39;
inline int Test1::rf_enum_out_size() const {
  return rf_enum_out_.size();
}
inline void Test1::clear_rf_enum_out() {
  rf_enum_out_.Clear();
}
inline ::Enum0 Test1::rf_enum_out(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rf_enum_out)
  return static_cast< ::Enum0 >(rf_enum_out_.Get(index));
}
inline void Test1::set_rf_enum_out(int index, ::Enum0 value) {
  assert(::Enum0_IsValid(value));
  rf_enum_out_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rf_enum_out)
}
inline void Test1::add_rf_enum_out(::Enum0 value) {
  assert(::Enum0_IsValid(value));
  rf_enum_out_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rf_enum_out)
}
inline const ::google::protobuf::RepeatedField<int>&
Test1::rf_enum_out() const {
  // @@protoc_insertion_point(field_list:Test1.rf_enum_out)
  return rf_enum_out_;
}
inline ::google::protobuf::RepeatedField<int>*
Test1::mutable_rf_enum_out() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rf_enum_out)
  return &rf_enum_out_;
}

// repeated .Test2.TestInner2 rf_empty_inner = 40;
inline int Test1::rf_empty_inner_size() const {
  return rf_empty_inner_.size();
}
inline void Test1::clear_rf_empty_inner() {
  rf_empty_inner_.Clear();
}
inline ::Test2_TestInner2* Test1::mutable_rf_empty_inner(int index) {
  // @@protoc_insertion_point(field_mutable:Test1.rf_empty_inner)
  return rf_empty_inner_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Test2_TestInner2 >*
Test1::mutable_rf_empty_inner() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rf_empty_inner)
  return &rf_empty_inner_;
}
inline const ::Test2_TestInner2& Test1::rf_empty_inner(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rf_empty_inner)
  return rf_empty_inner_.Get(index);
}
inline ::Test2_TestInner2* Test1::add_rf_empty_inner() {
  // @@protoc_insertion_point(field_add:Test1.rf_empty_inner)
  return rf_empty_inner_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Test2_TestInner2 >&
Test1::rf_empty_inner() const {
  // @@protoc_insertion_point(field_list:Test1.rf_empty_inner)
  return rf_empty_inner_;
}

// repeated .Test2.TestEnum rf_enum_inner = 41;
inline int Test1::rf_enum_inner_size() const {
  return rf_enum_inner_.size();
}
inline void Test1::clear_rf_enum_inner() {
  rf_enum_inner_.Clear();
}
inline ::Test2_TestEnum Test1::rf_enum_inner(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rf_enum_inner)
  return static_cast< ::Test2_TestEnum >(rf_enum_inner_.Get(index));
}
inline void Test1::set_rf_enum_inner(int index, ::Test2_TestEnum value) {
  assert(::Test2_TestEnum_IsValid(value));
  rf_enum_inner_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rf_enum_inner)
}
inline void Test1::add_rf_enum_inner(::Test2_TestEnum value) {
  assert(::Test2_TestEnum_IsValid(value));
  rf_enum_inner_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rf_enum_inner)
}
inline const ::google::protobuf::RepeatedField<int>&
Test1::rf_enum_inner() const {
  // @@protoc_insertion_point(field_list:Test1.rf_enum_inner)
  return rf_enum_inner_;
}
inline ::google::protobuf::RepeatedField<int>*
Test1::mutable_rf_enum_inner() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rf_enum_inner)
  return &rf_enum_inner_;
}

// repeated double rfu_double = 42 [packed = true];
inline int Test1::rfu_double_size() const {
  return rfu_double_.size();
}
inline void Test1::clear_rfu_double() {
  rfu_double_.Clear();
}
inline double Test1::rfu_double(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rfu_double)
  return rfu_double_.Get(index);
}
inline void Test1::set_rfu_double(int index, double value) {
  rfu_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rfu_double)
}
inline void Test1::add_rfu_double(double value) {
  rfu_double_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rfu_double)
}
inline const ::google::protobuf::RepeatedField< double >&
Test1::rfu_double() const {
  // @@protoc_insertion_point(field_list:Test1.rfu_double)
  return rfu_double_;
}
inline ::google::protobuf::RepeatedField< double >*
Test1::mutable_rfu_double() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rfu_double)
  return &rfu_double_;
}

// repeated float rfu_float = 43 [packed = true];
inline int Test1::rfu_float_size() const {
  return rfu_float_.size();
}
inline void Test1::clear_rfu_float() {
  rfu_float_.Clear();
}
inline float Test1::rfu_float(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rfu_float)
  return rfu_float_.Get(index);
}
inline void Test1::set_rfu_float(int index, float value) {
  rfu_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rfu_float)
}
inline void Test1::add_rfu_float(float value) {
  rfu_float_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rfu_float)
}
inline const ::google::protobuf::RepeatedField< float >&
Test1::rfu_float() const {
  // @@protoc_insertion_point(field_list:Test1.rfu_float)
  return rfu_float_;
}
inline ::google::protobuf::RepeatedField< float >*
Test1::mutable_rfu_float() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rfu_float)
  return &rfu_float_;
}

// repeated int32 rfu_int32 = 44 [packed = true];
inline int Test1::rfu_int32_size() const {
  return rfu_int32_.size();
}
inline void Test1::clear_rfu_int32() {
  rfu_int32_.Clear();
}
inline ::google::protobuf::int32 Test1::rfu_int32(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rfu_int32)
  return rfu_int32_.Get(index);
}
inline void Test1::set_rfu_int32(int index, ::google::protobuf::int32 value) {
  rfu_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rfu_int32)
}
inline void Test1::add_rfu_int32(::google::protobuf::int32 value) {
  rfu_int32_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rfu_int32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Test1::rfu_int32() const {
  // @@protoc_insertion_point(field_list:Test1.rfu_int32)
  return rfu_int32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Test1::mutable_rfu_int32() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rfu_int32)
  return &rfu_int32_;
}

// repeated int64 rfu_int64 = 45 [packed = true];
inline int Test1::rfu_int64_size() const {
  return rfu_int64_.size();
}
inline void Test1::clear_rfu_int64() {
  rfu_int64_.Clear();
}
inline ::google::protobuf::int64 Test1::rfu_int64(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rfu_int64)
  return rfu_int64_.Get(index);
}
inline void Test1::set_rfu_int64(int index, ::google::protobuf::int64 value) {
  rfu_int64_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rfu_int64)
}
inline void Test1::add_rfu_int64(::google::protobuf::int64 value) {
  rfu_int64_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rfu_int64)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Test1::rfu_int64() const {
  // @@protoc_insertion_point(field_list:Test1.rfu_int64)
  return rfu_int64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Test1::mutable_rfu_int64() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rfu_int64)
  return &rfu_int64_;
}

// repeated uint32 rfu_uint32 = 46 [packed = true];
inline int Test1::rfu_uint32_size() const {
  return rfu_uint32_.size();
}
inline void Test1::clear_rfu_uint32() {
  rfu_uint32_.Clear();
}
inline ::google::protobuf::uint32 Test1::rfu_uint32(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rfu_uint32)
  return rfu_uint32_.Get(index);
}
inline void Test1::set_rfu_uint32(int index, ::google::protobuf::uint32 value) {
  rfu_uint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rfu_uint32)
}
inline void Test1::add_rfu_uint32(::google::protobuf::uint32 value) {
  rfu_uint32_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rfu_uint32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Test1::rfu_uint32() const {
  // @@protoc_insertion_point(field_list:Test1.rfu_uint32)
  return rfu_uint32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Test1::mutable_rfu_uint32() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rfu_uint32)
  return &rfu_uint32_;
}

// repeated uint64 rfu_uint64 = 47 [packed = true];
inline int Test1::rfu_uint64_size() const {
  return rfu_uint64_.size();
}
inline void Test1::clear_rfu_uint64() {
  rfu_uint64_.Clear();
}
inline ::google::protobuf::uint64 Test1::rfu_uint64(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rfu_uint64)
  return rfu_uint64_.Get(index);
}
inline void Test1::set_rfu_uint64(int index, ::google::protobuf::uint64 value) {
  rfu_uint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rfu_uint64)
}
inline void Test1::add_rfu_uint64(::google::protobuf::uint64 value) {
  rfu_uint64_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rfu_uint64)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Test1::rfu_uint64() const {
  // @@protoc_insertion_point(field_list:Test1.rfu_uint64)
  return rfu_uint64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Test1::mutable_rfu_uint64() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rfu_uint64)
  return &rfu_uint64_;
}

// repeated sint32 rfu_sint32 = 48 [packed = true];
inline int Test1::rfu_sint32_size() const {
  return rfu_sint32_.size();
}
inline void Test1::clear_rfu_sint32() {
  rfu_sint32_.Clear();
}
inline ::google::protobuf::int32 Test1::rfu_sint32(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rfu_sint32)
  return rfu_sint32_.Get(index);
}
inline void Test1::set_rfu_sint32(int index, ::google::protobuf::int32 value) {
  rfu_sint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rfu_sint32)
}
inline void Test1::add_rfu_sint32(::google::protobuf::int32 value) {
  rfu_sint32_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rfu_sint32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Test1::rfu_sint32() const {
  // @@protoc_insertion_point(field_list:Test1.rfu_sint32)
  return rfu_sint32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Test1::mutable_rfu_sint32() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rfu_sint32)
  return &rfu_sint32_;
}

// repeated sint64 rfu_sint64 = 49 [packed = true];
inline int Test1::rfu_sint64_size() const {
  return rfu_sint64_.size();
}
inline void Test1::clear_rfu_sint64() {
  rfu_sint64_.Clear();
}
inline ::google::protobuf::int64 Test1::rfu_sint64(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rfu_sint64)
  return rfu_sint64_.Get(index);
}
inline void Test1::set_rfu_sint64(int index, ::google::protobuf::int64 value) {
  rfu_sint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rfu_sint64)
}
inline void Test1::add_rfu_sint64(::google::protobuf::int64 value) {
  rfu_sint64_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rfu_sint64)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Test1::rfu_sint64() const {
  // @@protoc_insertion_point(field_list:Test1.rfu_sint64)
  return rfu_sint64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Test1::mutable_rfu_sint64() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rfu_sint64)
  return &rfu_sint64_;
}

// repeated fixed32 rfu_fixed32 = 50 [packed = true];
inline int Test1::rfu_fixed32_size() const {
  return rfu_fixed32_.size();
}
inline void Test1::clear_rfu_fixed32() {
  rfu_fixed32_.Clear();
}
inline ::google::protobuf::uint32 Test1::rfu_fixed32(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rfu_fixed32)
  return rfu_fixed32_.Get(index);
}
inline void Test1::set_rfu_fixed32(int index, ::google::protobuf::uint32 value) {
  rfu_fixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rfu_fixed32)
}
inline void Test1::add_rfu_fixed32(::google::protobuf::uint32 value) {
  rfu_fixed32_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rfu_fixed32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Test1::rfu_fixed32() const {
  // @@protoc_insertion_point(field_list:Test1.rfu_fixed32)
  return rfu_fixed32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Test1::mutable_rfu_fixed32() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rfu_fixed32)
  return &rfu_fixed32_;
}

// repeated fixed64 rfu_fixed64 = 51 [packed = true];
inline int Test1::rfu_fixed64_size() const {
  return rfu_fixed64_.size();
}
inline void Test1::clear_rfu_fixed64() {
  rfu_fixed64_.Clear();
}
inline ::google::protobuf::uint64 Test1::rfu_fixed64(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rfu_fixed64)
  return rfu_fixed64_.Get(index);
}
inline void Test1::set_rfu_fixed64(int index, ::google::protobuf::uint64 value) {
  rfu_fixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rfu_fixed64)
}
inline void Test1::add_rfu_fixed64(::google::protobuf::uint64 value) {
  rfu_fixed64_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rfu_fixed64)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Test1::rfu_fixed64() const {
  // @@protoc_insertion_point(field_list:Test1.rfu_fixed64)
  return rfu_fixed64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Test1::mutable_rfu_fixed64() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rfu_fixed64)
  return &rfu_fixed64_;
}

// repeated sfixed32 rfu_sfixed32 = 52 [packed = true];
inline int Test1::rfu_sfixed32_size() const {
  return rfu_sfixed32_.size();
}
inline void Test1::clear_rfu_sfixed32() {
  rfu_sfixed32_.Clear();
}
inline ::google::protobuf::int32 Test1::rfu_sfixed32(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rfu_sfixed32)
  return rfu_sfixed32_.Get(index);
}
inline void Test1::set_rfu_sfixed32(int index, ::google::protobuf::int32 value) {
  rfu_sfixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rfu_sfixed32)
}
inline void Test1::add_rfu_sfixed32(::google::protobuf::int32 value) {
  rfu_sfixed32_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rfu_sfixed32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Test1::rfu_sfixed32() const {
  // @@protoc_insertion_point(field_list:Test1.rfu_sfixed32)
  return rfu_sfixed32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Test1::mutable_rfu_sfixed32() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rfu_sfixed32)
  return &rfu_sfixed32_;
}

// repeated sfixed64 rfu_sfixed64 = 53 [packed = true];
inline int Test1::rfu_sfixed64_size() const {
  return rfu_sfixed64_.size();
}
inline void Test1::clear_rfu_sfixed64() {
  rfu_sfixed64_.Clear();
}
inline ::google::protobuf::int64 Test1::rfu_sfixed64(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rfu_sfixed64)
  return rfu_sfixed64_.Get(index);
}
inline void Test1::set_rfu_sfixed64(int index, ::google::protobuf::int64 value) {
  rfu_sfixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rfu_sfixed64)
}
inline void Test1::add_rfu_sfixed64(::google::protobuf::int64 value) {
  rfu_sfixed64_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rfu_sfixed64)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Test1::rfu_sfixed64() const {
  // @@protoc_insertion_point(field_list:Test1.rfu_sfixed64)
  return rfu_sfixed64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Test1::mutable_rfu_sfixed64() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rfu_sfixed64)
  return &rfu_sfixed64_;
}

// repeated bool rfu_bool = 54 [packed = true];
inline int Test1::rfu_bool_size() const {
  return rfu_bool_.size();
}
inline void Test1::clear_rfu_bool() {
  rfu_bool_.Clear();
}
inline bool Test1::rfu_bool(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rfu_bool)
  return rfu_bool_.Get(index);
}
inline void Test1::set_rfu_bool(int index, bool value) {
  rfu_bool_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test1.rfu_bool)
}
inline void Test1::add_rfu_bool(bool value) {
  rfu_bool_.Add(value);
  // @@protoc_insertion_point(field_add:Test1.rfu_bool)
}
inline const ::google::protobuf::RepeatedField< bool >&
Test1::rfu_bool() const {
  // @@protoc_insertion_point(field_list:Test1.rfu_bool)
  return rfu_bool_;
}
inline ::google::protobuf::RepeatedField< bool >*
Test1::mutable_rfu_bool() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rfu_bool)
  return &rfu_bool_;
}

// repeated .Test2.TestInner3.TestInner3_2 rf_inner = 55;
inline int Test1::rf_inner_size() const {
  return rf_inner_.size();
}
inline void Test1::clear_rf_inner() {
  rf_inner_.Clear();
}
inline ::Test2_TestInner3_TestInner3_2* Test1::mutable_rf_inner(int index) {
  // @@protoc_insertion_point(field_mutable:Test1.rf_inner)
  return rf_inner_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Test2_TestInner3_TestInner3_2 >*
Test1::mutable_rf_inner() {
  // @@protoc_insertion_point(field_mutable_list:Test1.rf_inner)
  return &rf_inner_;
}
inline const ::Test2_TestInner3_TestInner3_2& Test1::rf_inner(int index) const {
  // @@protoc_insertion_point(field_get:Test1.rf_inner)
  return rf_inner_.Get(index);
}
inline ::Test2_TestInner3_TestInner3_2* Test1::add_rf_inner() {
  // @@protoc_insertion_point(field_add:Test1.rf_inner)
  return rf_inner_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Test2_TestInner3_TestInner3_2 >&
Test1::rf_inner() const {
  // @@protoc_insertion_point(field_list:Test1.rf_inner)
  return rf_inner_;
}

inline bool Test1::has_f_oneof() const {
  return f_oneof_case() != F_ONEOF_NOT_SET;
}
inline void Test1::clear_has_f_oneof() {
  _oneof_case_[0] = F_ONEOF_NOT_SET;
}
inline Test1::FOneofCase Test1::f_oneof_case() const {
  return Test1::FOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Test2_TestInner1

// repeated double f1 = 1;
inline int Test2_TestInner1::f1_size() const {
  return f1_.size();
}
inline void Test2_TestInner1::clear_f1() {
  f1_.Clear();
}
inline double Test2_TestInner1::f1(int index) const {
  // @@protoc_insertion_point(field_get:Test2.TestInner1.f1)
  return f1_.Get(index);
}
inline void Test2_TestInner1::set_f1(int index, double value) {
  f1_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test2.TestInner1.f1)
}
inline void Test2_TestInner1::add_f1(double value) {
  f1_.Add(value);
  // @@protoc_insertion_point(field_add:Test2.TestInner1.f1)
}
inline const ::google::protobuf::RepeatedField< double >&
Test2_TestInner1::f1() const {
  // @@protoc_insertion_point(field_list:Test2.TestInner1.f1)
  return f1_;
}
inline ::google::protobuf::RepeatedField< double >*
Test2_TestInner1::mutable_f1() {
  // @@protoc_insertion_point(field_mutable_list:Test2.TestInner1.f1)
  return &f1_;
}

// optional float f2 = 2;
inline bool Test2_TestInner1::has_f2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Test2_TestInner1::set_has_f2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Test2_TestInner1::clear_has_f2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Test2_TestInner1::clear_f2() {
  f2_ = 0;
  clear_has_f2();
}
inline float Test2_TestInner1::f2() const {
  // @@protoc_insertion_point(field_get:Test2.TestInner1.f2)
  return f2_;
}
inline void Test2_TestInner1::set_f2(float value) {
  set_has_f2();
  f2_ = value;
  // @@protoc_insertion_point(field_set:Test2.TestInner1.f2)
}

// optional string f3 = 3;
inline bool Test2_TestInner1::has_f3() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Test2_TestInner1::set_has_f3() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Test2_TestInner1::clear_has_f3() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Test2_TestInner1::clear_f3() {
  f3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_f3();
}
inline const ::std::string& Test2_TestInner1::f3() const {
  // @@protoc_insertion_point(field_get:Test2.TestInner1.f3)
  return f3_.GetNoArena();
}
inline void Test2_TestInner1::set_f3(const ::std::string& value) {
  set_has_f3();
  f3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Test2.TestInner1.f3)
}
#if LANG_CXX11
inline void Test2_TestInner1::set_f3(::std::string&& value) {
  set_has_f3();
  f3_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Test2.TestInner1.f3)
}
#endif
inline void Test2_TestInner1::set_f3(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_f3();
  f3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Test2.TestInner1.f3)
}
inline void Test2_TestInner1::set_f3(const char* value, size_t size) {
  set_has_f3();
  f3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Test2.TestInner1.f3)
}
inline ::std::string* Test2_TestInner1::mutable_f3() {
  set_has_f3();
  // @@protoc_insertion_point(field_mutable:Test2.TestInner1.f3)
  return f3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Test2_TestInner1::release_f3() {
  // @@protoc_insertion_point(field_release:Test2.TestInner1.f3)
  clear_has_f3();
  return f3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test2_TestInner1::set_allocated_f3(::std::string* f3) {
  if (f3 != NULL) {
    set_has_f3();
  } else {
    clear_has_f3();
  }
  f3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), f3);
  // @@protoc_insertion_point(field_set_allocated:Test2.TestInner1.f3)
}

// -------------------------------------------------------------------

// Test2_TestInner2

// -------------------------------------------------------------------

// Test2_TestInner3_TestInner3_1

// -------------------------------------------------------------------

// Test2_TestInner3_TestInner3_2

// optional int32 f1 = 1;
inline bool Test2_TestInner3_TestInner3_2::has_f1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Test2_TestInner3_TestInner3_2::set_has_f1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Test2_TestInner3_TestInner3_2::clear_has_f1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Test2_TestInner3_TestInner3_2::clear_f1() {
  f1_ = 0;
  clear_has_f1();
}
inline ::google::protobuf::int32 Test2_TestInner3_TestInner3_2::f1() const {
  // @@protoc_insertion_point(field_get:Test2.TestInner3.TestInner3_2.f1)
  return f1_;
}
inline void Test2_TestInner3_TestInner3_2::set_f1(::google::protobuf::int32 value) {
  set_has_f1();
  f1_ = value;
  // @@protoc_insertion_point(field_set:Test2.TestInner3.TestInner3_2.f1)
}

// optional uint64 f2 = 2;
inline bool Test2_TestInner3_TestInner3_2::has_f2() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Test2_TestInner3_TestInner3_2::set_has_f2() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Test2_TestInner3_TestInner3_2::clear_has_f2() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Test2_TestInner3_TestInner3_2::clear_f2() {
  f2_ = GOOGLE_ULONGLONG(0);
  clear_has_f2();
}
inline ::google::protobuf::uint64 Test2_TestInner3_TestInner3_2::f2() const {
  // @@protoc_insertion_point(field_get:Test2.TestInner3.TestInner3_2.f2)
  return f2_;
}
inline void Test2_TestInner3_TestInner3_2::set_f2(::google::protobuf::uint64 value) {
  set_has_f2();
  f2_ = value;
  // @@protoc_insertion_point(field_set:Test2.TestInner3.TestInner3_2.f2)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Test2_TestInner3

// map<string, .Test2.TestInner3.TestInner3_2> f1 = 1;
inline int Test2_TestInner3::f1_size() const {
  return f1_.size();
}
inline void Test2_TestInner3::clear_f1() {
  f1_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::Test2_TestInner3_TestInner3_2 >&
Test2_TestInner3::f1() const {
  // @@protoc_insertion_point(field_map:Test2.TestInner3.f1)
  return f1_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::Test2_TestInner3_TestInner3_2 >*
Test2_TestInner3::mutable_f1() {
  // @@protoc_insertion_point(field_mutable_map:Test2.TestInner3.f1)
  return f1_.MutableMap();
}

// optional .Test2.TestEnum f2 = 2;
inline bool Test2_TestInner3::has_f2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Test2_TestInner3::set_has_f2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Test2_TestInner3::clear_has_f2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Test2_TestInner3::clear_f2() {
  f2_ = 0;
  clear_has_f2();
}
inline ::Test2_TestEnum Test2_TestInner3::f2() const {
  // @@protoc_insertion_point(field_get:Test2.TestInner3.f2)
  return static_cast< ::Test2_TestEnum >(f2_);
}
inline void Test2_TestInner3::set_f2(::Test2_TestEnum value) {
  assert(::Test2_TestEnum_IsValid(value));
  set_has_f2();
  f2_ = value;
  // @@protoc_insertion_point(field_set:Test2.TestInner3.f2)
}

// optional .Test2.TestInner3.TestInner3_1 f3 = 3;
inline bool Test2_TestInner3::has_f3() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Test2_TestInner3::set_has_f3() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Test2_TestInner3::clear_has_f3() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Test2_TestInner3::clear_f3() {
  if (f3_ != NULL) f3_->Clear();
  clear_has_f3();
}
inline const ::Test2_TestInner3_TestInner3_1& Test2_TestInner3::f3() const {
  const ::Test2_TestInner3_TestInner3_1* p = f3_;
  // @@protoc_insertion_point(field_get:Test2.TestInner3.f3)
  return p != NULL ? *p : *reinterpret_cast<const ::Test2_TestInner3_TestInner3_1*>(
      &::_Test2_TestInner3_TestInner3_1_default_instance_);
}
inline ::Test2_TestInner3_TestInner3_1* Test2_TestInner3::release_f3() {
  // @@protoc_insertion_point(field_release:Test2.TestInner3.f3)
  clear_has_f3();
  ::Test2_TestInner3_TestInner3_1* temp = f3_;
  f3_ = NULL;
  return temp;
}
inline ::Test2_TestInner3_TestInner3_1* Test2_TestInner3::mutable_f3() {
  set_has_f3();
  if (f3_ == NULL) {
    f3_ = ::google::protobuf::Arena::Create< ::Test2_TestInner3_TestInner3_1 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Test2.TestInner3.f3)
  return f3_;
}
inline void Test2_TestInner3::set_allocated_f3(::Test2_TestInner3_TestInner3_1* f3) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete f3_;
  }
  if (f3) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      f3 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, f3, submessage_arena);
    }
    set_has_f3();
  } else {
    clear_has_f3();
  }
  f3_ = f3;
  // @@protoc_insertion_point(field_set_allocated:Test2.TestInner3.f3)
}

// -------------------------------------------------------------------

// Test2

// repeated string f1 = 1;
inline int Test2::f1_size() const {
  return f1_.size();
}
inline void Test2::clear_f1() {
  f1_.Clear();
}
inline const ::std::string& Test2::f1(int index) const {
  // @@protoc_insertion_point(field_get:Test2.f1)
  return f1_.Get(index);
}
inline ::std::string* Test2::mutable_f1(int index) {
  // @@protoc_insertion_point(field_mutable:Test2.f1)
  return f1_.Mutable(index);
}
inline void Test2::set_f1(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Test2.f1)
  f1_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Test2::set_f1(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Test2.f1)
  f1_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Test2::set_f1(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  f1_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Test2.f1)
}
inline void Test2::set_f1(int index, const char* value, size_t size) {
  f1_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Test2.f1)
}
inline ::std::string* Test2::add_f1() {
  // @@protoc_insertion_point(field_add_mutable:Test2.f1)
  return f1_.Add();
}
inline void Test2::add_f1(const ::std::string& value) {
  f1_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Test2.f1)
}
#if LANG_CXX11
inline void Test2::add_f1(::std::string&& value) {
  f1_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Test2.f1)
}
#endif
inline void Test2::add_f1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  f1_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Test2.f1)
}
inline void Test2::add_f1(const char* value, size_t size) {
  f1_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Test2.f1)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Test2::f1() const {
  // @@protoc_insertion_point(field_list:Test2.f1)
  return f1_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Test2::mutable_f1() {
  // @@protoc_insertion_point(field_mutable_list:Test2.f1)
  return &f1_;
}

// optional fixed64 f2 = 2;
inline bool Test2::has_f2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Test2::set_has_f2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Test2::clear_has_f2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Test2::clear_f2() {
  f2_ = GOOGLE_ULONGLONG(0);
  clear_has_f2();
}
inline ::google::protobuf::uint64 Test2::f2() const {
  // @@protoc_insertion_point(field_get:Test2.f2)
  return f2_;
}
inline void Test2::set_f2(::google::protobuf::uint64 value) {
  set_has_f2();
  f2_ = value;
  // @@protoc_insertion_point(field_set:Test2.f2)
}

// optional string f3 = 3;
inline bool Test2::has_f3() const {
  return test_oneof_case() == kF3;
}
inline void Test2::set_has_f3() {
  _oneof_case_[0] = kF3;
}
inline void Test2::clear_f3() {
  if (has_f3()) {
    test_oneof_.f3_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_test_oneof();
  }
}
inline const ::std::string& Test2::f3() const {
  // @@protoc_insertion_point(field_get:Test2.f3)
  if (has_f3()) {
    return test_oneof_.f3_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Test2::set_f3(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Test2.f3)
  if (!has_f3()) {
    clear_test_oneof();
    set_has_f3();
    test_oneof_.f3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  test_oneof_.f3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Test2.f3)
}
#if LANG_CXX11
inline void Test2::set_f3(::std::string&& value) {
  // @@protoc_insertion_point(field_set:Test2.f3)
  if (!has_f3()) {
    clear_test_oneof();
    set_has_f3();
    test_oneof_.f3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  test_oneof_.f3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Test2.f3)
}
#endif
inline void Test2::set_f3(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_f3()) {
    clear_test_oneof();
    set_has_f3();
    test_oneof_.f3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  test_oneof_.f3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Test2.f3)
}
inline void Test2::set_f3(const char* value, size_t size) {
  if (!has_f3()) {
    clear_test_oneof();
    set_has_f3();
    test_oneof_.f3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  test_oneof_.f3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Test2.f3)
}
inline ::std::string* Test2::mutable_f3() {
  if (!has_f3()) {
    clear_test_oneof();
    set_has_f3();
    test_oneof_.f3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:Test2.f3)
  return test_oneof_.f3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Test2::release_f3() {
  // @@protoc_insertion_point(field_release:Test2.f3)
  if (has_f3()) {
    clear_has_test_oneof();
    return test_oneof_.f3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Test2::set_allocated_f3(::std::string* f3) {
  if (!has_f3()) {
    test_oneof_.f3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_test_oneof();
  if (f3 != NULL) {
    set_has_f3();
    test_oneof_.f3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), f3);
  }
  // @@protoc_insertion_point(field_set_allocated:Test2.f3)
}

// optional .Test2.TestInner3 f4 = 4;
inline bool Test2::has_f4() const {
  return test_oneof_case() == kF4;
}
inline void Test2::set_has_f4() {
  _oneof_case_[0] = kF4;
}
inline void Test2::clear_f4() {
  if (has_f4()) {
    delete test_oneof_.f4_;
    clear_has_test_oneof();
  }
}
inline ::Test2_TestInner3* Test2::release_f4() {
  // @@protoc_insertion_point(field_release:Test2.f4)
  if (has_f4()) {
    clear_has_test_oneof();
      ::Test2_TestInner3* temp = test_oneof_.f4_;
    test_oneof_.f4_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::Test2_TestInner3& Test2::f4() const {
  // @@protoc_insertion_point(field_get:Test2.f4)
  return has_f4()
      ? *test_oneof_.f4_
      : *reinterpret_cast< ::Test2_TestInner3*>(&::_Test2_TestInner3_default_instance_);
}
inline ::Test2_TestInner3* Test2::mutable_f4() {
  if (!has_f4()) {
    clear_test_oneof();
    set_has_f4();
    test_oneof_.f4_ = ::google::protobuf::Arena::Create< ::Test2_TestInner3 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Test2.f4)
  return test_oneof_.f4_;
}

// optional .Test2.TestInner2 f5 = 5;
inline bool Test2::has_f5() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Test2::set_has_f5() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Test2::clear_has_f5() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Test2::clear_f5() {
  if (f5_ != NULL) f5_->Clear();
  clear_has_f5();
}
inline const ::Test2_TestInner2& Test2::f5() const {
  const ::Test2_TestInner2* p = f5_;
  // @@protoc_insertion_point(field_get:Test2.f5)
  return p != NULL ? *p : *reinterpret_cast<const ::Test2_TestInner2*>(
      &::_Test2_TestInner2_default_instance_);
}
inline ::Test2_TestInner2* Test2::release_f5() {
  // @@protoc_insertion_point(field_release:Test2.f5)
  clear_has_f5();
  ::Test2_TestInner2* temp = f5_;
  f5_ = NULL;
  return temp;
}
inline ::Test2_TestInner2* Test2::mutable_f5() {
  set_has_f5();
  if (f5_ == NULL) {
    f5_ = ::google::protobuf::Arena::Create< ::Test2_TestInner2 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Test2.f5)
  return f5_;
}
inline void Test2::set_allocated_f5(::Test2_TestInner2* f5) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete f5_;
  }
  if (f5) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      f5 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, f5, submessage_arena);
    }
    set_has_f5();
  } else {
    clear_has_f5();
  }
  f5_ = f5;
  // @@protoc_insertion_point(field_set_allocated:Test2.f5)
}

// optional .Test2.TestInner3 f6 = 6;
inline bool Test2::has_f6() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Test2::set_has_f6() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Test2::clear_has_f6() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Test2::clear_f6() {
  if (f6_ != NULL) f6_->Clear();
  clear_has_f6();
}
inline const ::Test2_TestInner3& Test2::f6() const {
  const ::Test2_TestInner3* p = f6_;
  // @@protoc_insertion_point(field_get:Test2.f6)
  return p != NULL ? *p : *reinterpret_cast<const ::Test2_TestInner3*>(
      &::_Test2_TestInner3_default_instance_);
}
inline ::Test2_TestInner3* Test2::release_f6() {
  // @@protoc_insertion_point(field_release:Test2.f6)
  clear_has_f6();
  ::Test2_TestInner3* temp = f6_;
  f6_ = NULL;
  return temp;
}
inline ::Test2_TestInner3* Test2::mutable_f6() {
  set_has_f6();
  if (f6_ == NULL) {
    f6_ = ::google::protobuf::Arena::Create< ::Test2_TestInner3 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Test2.f6)
  return f6_;
}
inline void Test2::set_allocated_f6(::Test2_TestInner3* f6) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete f6_;
  }
  if (f6) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      f6 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, f6, submessage_arena);
    }
    set_has_f6();
  } else {
    clear_has_f6();
  }
  f6_ = f6;
  // @@protoc_insertion_point(field_set_allocated:Test2.f6)
}

// optional .Test2.TestInner1 f7 = 7;
inline bool Test2::has_f7() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Test2::set_has_f7() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Test2::clear_has_f7() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Test2::clear_f7() {
  if (f7_ != NULL) f7_->Clear();
  clear_has_f7();
}
inline const ::Test2_TestInner1& Test2::f7() const {
  const ::Test2_TestInner1* p = f7_;
  // @@protoc_insertion_point(field_get:Test2.f7)
  return p != NULL ? *p : *reinterpret_cast<const ::Test2_TestInner1*>(
      &::_Test2_TestInner1_default_instance_);
}
inline ::Test2_TestInner1* Test2::release_f7() {
  // @@protoc_insertion_point(field_release:Test2.f7)
  clear_has_f7();
  ::Test2_TestInner1* temp = f7_;
  f7_ = NULL;
  return temp;
}
inline ::Test2_TestInner1* Test2::mutable_f7() {
  set_has_f7();
  if (f7_ == NULL) {
    f7_ = ::google::protobuf::Arena::Create< ::Test2_TestInner1 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Test2.f7)
  return f7_;
}
inline void Test2::set_allocated_f7(::Test2_TestInner1* f7) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete f7_;
  }
  if (f7) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      f7 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, f7, submessage_arena);
    }
    set_has_f7();
  } else {
    clear_has_f7();
  }
  f7_ = f7;
  // @@protoc_insertion_point(field_set_allocated:Test2.f7)
}

inline bool Test2::has_test_oneof() const {
  return test_oneof_case() != TEST_ONEOF_NOT_SET;
}
inline void Test2::clear_has_test_oneof() {
  _oneof_case_[0] = TEST_ONEOF_NOT_SET;
}
inline Test2::TestOneofCase Test2::test_oneof_case() const {
  return Test2::TestOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Test3_InnerReq

// required int32 f1 = 1;
inline bool Test3_InnerReq::has_f1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Test3_InnerReq::set_has_f1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Test3_InnerReq::clear_has_f1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Test3_InnerReq::clear_f1() {
  f1_ = 0;
  clear_has_f1();
}
inline ::google::protobuf::int32 Test3_InnerReq::f1() const {
  // @@protoc_insertion_point(field_get:Test3.InnerReq.f1)
  return f1_;
}
inline void Test3_InnerReq::set_f1(::google::protobuf::int32 value) {
  set_has_f1();
  f1_ = value;
  // @@protoc_insertion_point(field_set:Test3.InnerReq.f1)
}

// -------------------------------------------------------------------

// Test3_InnerOpt

// optional int32 f1 = 1;
inline bool Test3_InnerOpt::has_f1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Test3_InnerOpt::set_has_f1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Test3_InnerOpt::clear_has_f1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Test3_InnerOpt::clear_f1() {
  f1_ = 0;
  clear_has_f1();
}
inline ::google::protobuf::int32 Test3_InnerOpt::f1() const {
  // @@protoc_insertion_point(field_get:Test3.InnerOpt.f1)
  return f1_;
}
inline void Test3_InnerOpt::set_f1(::google::protobuf::int32 value) {
  set_has_f1();
  f1_ = value;
  // @@protoc_insertion_point(field_set:Test3.InnerOpt.f1)
}

// -------------------------------------------------------------------

// Test3_InnerRep

// repeated int32 f1 = 1;
inline int Test3_InnerRep::f1_size() const {
  return f1_.size();
}
inline void Test3_InnerRep::clear_f1() {
  f1_.Clear();
}
inline ::google::protobuf::int32 Test3_InnerRep::f1(int index) const {
  // @@protoc_insertion_point(field_get:Test3.InnerRep.f1)
  return f1_.Get(index);
}
inline void Test3_InnerRep::set_f1(int index, ::google::protobuf::int32 value) {
  f1_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test3.InnerRep.f1)
}
inline void Test3_InnerRep::add_f1(::google::protobuf::int32 value) {
  f1_.Add(value);
  // @@protoc_insertion_point(field_add:Test3.InnerRep.f1)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Test3_InnerRep::f1() const {
  // @@protoc_insertion_point(field_list:Test3.InnerRep.f1)
  return f1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Test3_InnerRep::mutable_f1() {
  // @@protoc_insertion_point(field_mutable_list:Test3.InnerRep.f1)
  return &f1_;
}

// -------------------------------------------------------------------

// Test3

// required int32 f_req_int32 = 1;
inline bool Test3::has_f_req_int32() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Test3::set_has_f_req_int32() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Test3::clear_has_f_req_int32() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Test3::clear_f_req_int32() {
  f_req_int32_ = 0;
  clear_has_f_req_int32();
}
inline ::google::protobuf::int32 Test3::f_req_int32() const {
  // @@protoc_insertion_point(field_get:Test3.f_req_int32)
  return f_req_int32_;
}
inline void Test3::set_f_req_int32(::google::protobuf::int32 value) {
  set_has_f_req_int32();
  f_req_int32_ = value;
  // @@protoc_insertion_point(field_set:Test3.f_req_int32)
}

// required float f_req_float = 2;
inline bool Test3::has_f_req_float() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Test3::set_has_f_req_float() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Test3::clear_has_f_req_float() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Test3::clear_f_req_float() {
  f_req_float_ = 0;
  clear_has_f_req_float();
}
inline float Test3::f_req_float() const {
  // @@protoc_insertion_point(field_get:Test3.f_req_float)
  return f_req_float_;
}
inline void Test3::set_f_req_float(float value) {
  set_has_f_req_float();
  f_req_float_ = value;
  // @@protoc_insertion_point(field_set:Test3.f_req_float)
}

// required string f_req_string = 3;
inline bool Test3::has_f_req_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Test3::set_has_f_req_string() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Test3::clear_has_f_req_string() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Test3::clear_f_req_string() {
  f_req_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_f_req_string();
}
inline const ::std::string& Test3::f_req_string() const {
  // @@protoc_insertion_point(field_get:Test3.f_req_string)
  return f_req_string_.GetNoArena();
}
inline void Test3::set_f_req_string(const ::std::string& value) {
  set_has_f_req_string();
  f_req_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Test3.f_req_string)
}
#if LANG_CXX11
inline void Test3::set_f_req_string(::std::string&& value) {
  set_has_f_req_string();
  f_req_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Test3.f_req_string)
}
#endif
inline void Test3::set_f_req_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_f_req_string();
  f_req_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Test3.f_req_string)
}
inline void Test3::set_f_req_string(const char* value, size_t size) {
  set_has_f_req_string();
  f_req_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Test3.f_req_string)
}
inline ::std::string* Test3::mutable_f_req_string() {
  set_has_f_req_string();
  // @@protoc_insertion_point(field_mutable:Test3.f_req_string)
  return f_req_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Test3::release_f_req_string() {
  // @@protoc_insertion_point(field_release:Test3.f_req_string)
  clear_has_f_req_string();
  return f_req_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test3::set_allocated_f_req_string(::std::string* f_req_string) {
  if (f_req_string != NULL) {
    set_has_f_req_string();
  } else {
    clear_has_f_req_string();
  }
  f_req_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), f_req_string);
  // @@protoc_insertion_point(field_set_allocated:Test3.f_req_string)
}

// required .Test3.InnerReq f_req_inner_req = 4;
inline bool Test3::has_f_req_inner_req() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Test3::set_has_f_req_inner_req() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Test3::clear_has_f_req_inner_req() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Test3::clear_f_req_inner_req() {
  if (f_req_inner_req_ != NULL) f_req_inner_req_->Clear();
  clear_has_f_req_inner_req();
}
inline const ::Test3_InnerReq& Test3::f_req_inner_req() const {
  const ::Test3_InnerReq* p = f_req_inner_req_;
  // @@protoc_insertion_point(field_get:Test3.f_req_inner_req)
  return p != NULL ? *p : *reinterpret_cast<const ::Test3_InnerReq*>(
      &::_Test3_InnerReq_default_instance_);
}
inline ::Test3_InnerReq* Test3::release_f_req_inner_req() {
  // @@protoc_insertion_point(field_release:Test3.f_req_inner_req)
  clear_has_f_req_inner_req();
  ::Test3_InnerReq* temp = f_req_inner_req_;
  f_req_inner_req_ = NULL;
  return temp;
}
inline ::Test3_InnerReq* Test3::mutable_f_req_inner_req() {
  set_has_f_req_inner_req();
  if (f_req_inner_req_ == NULL) {
    f_req_inner_req_ = ::google::protobuf::Arena::Create< ::Test3_InnerReq >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Test3.f_req_inner_req)
  return f_req_inner_req_;
}
inline void Test3::set_allocated_f_req_inner_req(::Test3_InnerReq* f_req_inner_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete f_req_inner_req_;
  }
  if (f_req_inner_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      f_req_inner_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, f_req_inner_req, submessage_arena);
    }
    set_has_f_req_inner_req();
  } else {
    clear_has_f_req_inner_req();
  }
  f_req_inner_req_ = f_req_inner_req;
  // @@protoc_insertion_point(field_set_allocated:Test3.f_req_inner_req)
}

// required .Test3.InnerOpt f_req_inner_opt = 5;
inline bool Test3::has_f_req_inner_opt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Test3::set_has_f_req_inner_opt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Test3::clear_has_f_req_inner_opt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Test3::clear_f_req_inner_opt() {
  if (f_req_inner_opt_ != NULL) f_req_inner_opt_->Clear();
  clear_has_f_req_inner_opt();
}
inline const ::Test3_InnerOpt& Test3::f_req_inner_opt() const {
  const ::Test3_InnerOpt* p = f_req_inner_opt_;
  // @@protoc_insertion_point(field_get:Test3.f_req_inner_opt)
  return p != NULL ? *p : *reinterpret_cast<const ::Test3_InnerOpt*>(
      &::_Test3_InnerOpt_default_instance_);
}
inline ::Test3_InnerOpt* Test3::release_f_req_inner_opt() {
  // @@protoc_insertion_point(field_release:Test3.f_req_inner_opt)
  clear_has_f_req_inner_opt();
  ::Test3_InnerOpt* temp = f_req_inner_opt_;
  f_req_inner_opt_ = NULL;
  return temp;
}
inline ::Test3_InnerOpt* Test3::mutable_f_req_inner_opt() {
  set_has_f_req_inner_opt();
  if (f_req_inner_opt_ == NULL) {
    f_req_inner_opt_ = ::google::protobuf::Arena::Create< ::Test3_InnerOpt >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Test3.f_req_inner_opt)
  return f_req_inner_opt_;
}
inline void Test3::set_allocated_f_req_inner_opt(::Test3_InnerOpt* f_req_inner_opt) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete f_req_inner_opt_;
  }
  if (f_req_inner_opt) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      f_req_inner_opt = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, f_req_inner_opt, submessage_arena);
    }
    set_has_f_req_inner_opt();
  } else {
    clear_has_f_req_inner_opt();
  }
  f_req_inner_opt_ = f_req_inner_opt;
  // @@protoc_insertion_point(field_set_allocated:Test3.f_req_inner_opt)
}

// required .Test3.InnerRep f_req_inner_rep = 6;
inline bool Test3::has_f_req_inner_rep() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Test3::set_has_f_req_inner_rep() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Test3::clear_has_f_req_inner_rep() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Test3::clear_f_req_inner_rep() {
  if (f_req_inner_rep_ != NULL) f_req_inner_rep_->Clear();
  clear_has_f_req_inner_rep();
}
inline const ::Test3_InnerRep& Test3::f_req_inner_rep() const {
  const ::Test3_InnerRep* p = f_req_inner_rep_;
  // @@protoc_insertion_point(field_get:Test3.f_req_inner_rep)
  return p != NULL ? *p : *reinterpret_cast<const ::Test3_InnerRep*>(
      &::_Test3_InnerRep_default_instance_);
}
inline ::Test3_InnerRep* Test3::release_f_req_inner_rep() {
  // @@protoc_insertion_point(field_release:Test3.f_req_inner_rep)
  clear_has_f_req_inner_rep();
  ::Test3_InnerRep* temp = f_req_inner_rep_;
  f_req_inner_rep_ = NULL;
  return temp;
}
inline ::Test3_InnerRep* Test3::mutable_f_req_inner_rep() {
  set_has_f_req_inner_rep();
  if (f_req_inner_rep_ == NULL) {
    f_req_inner_rep_ = ::google::protobuf::Arena::Create< ::Test3_InnerRep >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Test3.f_req_inner_rep)
  return f_req_inner_rep_;
}
inline void Test3::set_allocated_f_req_inner_rep(::Test3_InnerRep* f_req_inner_rep) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete f_req_inner_rep_;
  }
  if (f_req_inner_rep) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      f_req_inner_rep = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, f_req_inner_rep, submessage_arena);
    }
    set_has_f_req_inner_rep();
  } else {
    clear_has_f_req_inner_rep();
  }
  f_req_inner_rep_ = f_req_inner_rep;
  // @@protoc_insertion_point(field_set_allocated:Test3.f_req_inner_rep)
}

// optional int32 f_opt_int32 = 7;
inline bool Test3::has_f_opt_int32() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Test3::set_has_f_opt_int32() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Test3::clear_has_f_opt_int32() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Test3::clear_f_opt_int32() {
  f_opt_int32_ = 0;
  clear_has_f_opt_int32();
}
inline ::google::protobuf::int32 Test3::f_opt_int32() const {
  // @@protoc_insertion_point(field_get:Test3.f_opt_int32)
  return f_opt_int32_;
}
inline void Test3::set_f_opt_int32(::google::protobuf::int32 value) {
  set_has_f_opt_int32();
  f_opt_int32_ = value;
  // @@protoc_insertion_point(field_set:Test3.f_opt_int32)
}

// optional float f_opt_float = 8;
inline bool Test3::has_f_opt_float() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Test3::set_has_f_opt_float() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Test3::clear_has_f_opt_float() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Test3::clear_f_opt_float() {
  f_opt_float_ = 0;
  clear_has_f_opt_float();
}
inline float Test3::f_opt_float() const {
  // @@protoc_insertion_point(field_get:Test3.f_opt_float)
  return f_opt_float_;
}
inline void Test3::set_f_opt_float(float value) {
  set_has_f_opt_float();
  f_opt_float_ = value;
  // @@protoc_insertion_point(field_set:Test3.f_opt_float)
}

// optional string f_opt_string = 9;
inline bool Test3::has_f_opt_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Test3::set_has_f_opt_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Test3::clear_has_f_opt_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Test3::clear_f_opt_string() {
  f_opt_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_f_opt_string();
}
inline const ::std::string& Test3::f_opt_string() const {
  // @@protoc_insertion_point(field_get:Test3.f_opt_string)
  return f_opt_string_.GetNoArena();
}
inline void Test3::set_f_opt_string(const ::std::string& value) {
  set_has_f_opt_string();
  f_opt_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Test3.f_opt_string)
}
#if LANG_CXX11
inline void Test3::set_f_opt_string(::std::string&& value) {
  set_has_f_opt_string();
  f_opt_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Test3.f_opt_string)
}
#endif
inline void Test3::set_f_opt_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_f_opt_string();
  f_opt_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Test3.f_opt_string)
}
inline void Test3::set_f_opt_string(const char* value, size_t size) {
  set_has_f_opt_string();
  f_opt_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Test3.f_opt_string)
}
inline ::std::string* Test3::mutable_f_opt_string() {
  set_has_f_opt_string();
  // @@protoc_insertion_point(field_mutable:Test3.f_opt_string)
  return f_opt_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Test3::release_f_opt_string() {
  // @@protoc_insertion_point(field_release:Test3.f_opt_string)
  clear_has_f_opt_string();
  return f_opt_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test3::set_allocated_f_opt_string(::std::string* f_opt_string) {
  if (f_opt_string != NULL) {
    set_has_f_opt_string();
  } else {
    clear_has_f_opt_string();
  }
  f_opt_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), f_opt_string);
  // @@protoc_insertion_point(field_set_allocated:Test3.f_opt_string)
}

// optional .Test3.InnerReq f_opt_inner_req = 10;
inline bool Test3::has_f_opt_inner_req() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Test3::set_has_f_opt_inner_req() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Test3::clear_has_f_opt_inner_req() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Test3::clear_f_opt_inner_req() {
  if (f_opt_inner_req_ != NULL) f_opt_inner_req_->Clear();
  clear_has_f_opt_inner_req();
}
inline const ::Test3_InnerReq& Test3::f_opt_inner_req() const {
  const ::Test3_InnerReq* p = f_opt_inner_req_;
  // @@protoc_insertion_point(field_get:Test3.f_opt_inner_req)
  return p != NULL ? *p : *reinterpret_cast<const ::Test3_InnerReq*>(
      &::_Test3_InnerReq_default_instance_);
}
inline ::Test3_InnerReq* Test3::release_f_opt_inner_req() {
  // @@protoc_insertion_point(field_release:Test3.f_opt_inner_req)
  clear_has_f_opt_inner_req();
  ::Test3_InnerReq* temp = f_opt_inner_req_;
  f_opt_inner_req_ = NULL;
  return temp;
}
inline ::Test3_InnerReq* Test3::mutable_f_opt_inner_req() {
  set_has_f_opt_inner_req();
  if (f_opt_inner_req_ == NULL) {
    f_opt_inner_req_ = ::google::protobuf::Arena::Create< ::Test3_InnerReq >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Test3.f_opt_inner_req)
  return f_opt_inner_req_;
}
inline void Test3::set_allocated_f_opt_inner_req(::Test3_InnerReq* f_opt_inner_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete f_opt_inner_req_;
  }
  if (f_opt_inner_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      f_opt_inner_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, f_opt_inner_req, submessage_arena);
    }
    set_has_f_opt_inner_req();
  } else {
    clear_has_f_opt_inner_req();
  }
  f_opt_inner_req_ = f_opt_inner_req;
  // @@protoc_insertion_point(field_set_allocated:Test3.f_opt_inner_req)
}

// optional .Test3.InnerOpt f_opt_inner_opt = 11;
inline bool Test3::has_f_opt_inner_opt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Test3::set_has_f_opt_inner_opt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Test3::clear_has_f_opt_inner_opt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Test3::clear_f_opt_inner_opt() {
  if (f_opt_inner_opt_ != NULL) f_opt_inner_opt_->Clear();
  clear_has_f_opt_inner_opt();
}
inline const ::Test3_InnerOpt& Test3::f_opt_inner_opt() const {
  const ::Test3_InnerOpt* p = f_opt_inner_opt_;
  // @@protoc_insertion_point(field_get:Test3.f_opt_inner_opt)
  return p != NULL ? *p : *reinterpret_cast<const ::Test3_InnerOpt*>(
      &::_Test3_InnerOpt_default_instance_);
}
inline ::Test3_InnerOpt* Test3::release_f_opt_inner_opt() {
  // @@protoc_insertion_point(field_release:Test3.f_opt_inner_opt)
  clear_has_f_opt_inner_opt();
  ::Test3_InnerOpt* temp = f_opt_inner_opt_;
  f_opt_inner_opt_ = NULL;
  return temp;
}
inline ::Test3_InnerOpt* Test3::mutable_f_opt_inner_opt() {
  set_has_f_opt_inner_opt();
  if (f_opt_inner_opt_ == NULL) {
    f_opt_inner_opt_ = ::google::protobuf::Arena::Create< ::Test3_InnerOpt >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Test3.f_opt_inner_opt)
  return f_opt_inner_opt_;
}
inline void Test3::set_allocated_f_opt_inner_opt(::Test3_InnerOpt* f_opt_inner_opt) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete f_opt_inner_opt_;
  }
  if (f_opt_inner_opt) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      f_opt_inner_opt = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, f_opt_inner_opt, submessage_arena);
    }
    set_has_f_opt_inner_opt();
  } else {
    clear_has_f_opt_inner_opt();
  }
  f_opt_inner_opt_ = f_opt_inner_opt;
  // @@protoc_insertion_point(field_set_allocated:Test3.f_opt_inner_opt)
}

// optional .Test3.InnerRep f_opt_inner_rep = 12;
inline bool Test3::has_f_opt_inner_rep() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Test3::set_has_f_opt_inner_rep() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Test3::clear_has_f_opt_inner_rep() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Test3::clear_f_opt_inner_rep() {
  if (f_opt_inner_rep_ != NULL) f_opt_inner_rep_->Clear();
  clear_has_f_opt_inner_rep();
}
inline const ::Test3_InnerRep& Test3::f_opt_inner_rep() const {
  const ::Test3_InnerRep* p = f_opt_inner_rep_;
  // @@protoc_insertion_point(field_get:Test3.f_opt_inner_rep)
  return p != NULL ? *p : *reinterpret_cast<const ::Test3_InnerRep*>(
      &::_Test3_InnerRep_default_instance_);
}
inline ::Test3_InnerRep* Test3::release_f_opt_inner_rep() {
  // @@protoc_insertion_point(field_release:Test3.f_opt_inner_rep)
  clear_has_f_opt_inner_rep();
  ::Test3_InnerRep* temp = f_opt_inner_rep_;
  f_opt_inner_rep_ = NULL;
  return temp;
}
inline ::Test3_InnerRep* Test3::mutable_f_opt_inner_rep() {
  set_has_f_opt_inner_rep();
  if (f_opt_inner_rep_ == NULL) {
    f_opt_inner_rep_ = ::google::protobuf::Arena::Create< ::Test3_InnerRep >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Test3.f_opt_inner_rep)
  return f_opt_inner_rep_;
}
inline void Test3::set_allocated_f_opt_inner_rep(::Test3_InnerRep* f_opt_inner_rep) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete f_opt_inner_rep_;
  }
  if (f_opt_inner_rep) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      f_opt_inner_rep = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, f_opt_inner_rep, submessage_arena);
    }
    set_has_f_opt_inner_rep();
  } else {
    clear_has_f_opt_inner_rep();
  }
  f_opt_inner_rep_ = f_opt_inner_rep;
  // @@protoc_insertion_point(field_set_allocated:Test3.f_opt_inner_rep)
}

// repeated int32 f_rep_int32 = 13;
inline int Test3::f_rep_int32_size() const {
  return f_rep_int32_.size();
}
inline void Test3::clear_f_rep_int32() {
  f_rep_int32_.Clear();
}
inline ::google::protobuf::int32 Test3::f_rep_int32(int index) const {
  // @@protoc_insertion_point(field_get:Test3.f_rep_int32)
  return f_rep_int32_.Get(index);
}
inline void Test3::set_f_rep_int32(int index, ::google::protobuf::int32 value) {
  f_rep_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test3.f_rep_int32)
}
inline void Test3::add_f_rep_int32(::google::protobuf::int32 value) {
  f_rep_int32_.Add(value);
  // @@protoc_insertion_point(field_add:Test3.f_rep_int32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Test3::f_rep_int32() const {
  // @@protoc_insertion_point(field_list:Test3.f_rep_int32)
  return f_rep_int32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Test3::mutable_f_rep_int32() {
  // @@protoc_insertion_point(field_mutable_list:Test3.f_rep_int32)
  return &f_rep_int32_;
}

// repeated float f_rep_float = 14;
inline int Test3::f_rep_float_size() const {
  return f_rep_float_.size();
}
inline void Test3::clear_f_rep_float() {
  f_rep_float_.Clear();
}
inline float Test3::f_rep_float(int index) const {
  // @@protoc_insertion_point(field_get:Test3.f_rep_float)
  return f_rep_float_.Get(index);
}
inline void Test3::set_f_rep_float(int index, float value) {
  f_rep_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test3.f_rep_float)
}
inline void Test3::add_f_rep_float(float value) {
  f_rep_float_.Add(value);
  // @@protoc_insertion_point(field_add:Test3.f_rep_float)
}
inline const ::google::protobuf::RepeatedField< float >&
Test3::f_rep_float() const {
  // @@protoc_insertion_point(field_list:Test3.f_rep_float)
  return f_rep_float_;
}
inline ::google::protobuf::RepeatedField< float >*
Test3::mutable_f_rep_float() {
  // @@protoc_insertion_point(field_mutable_list:Test3.f_rep_float)
  return &f_rep_float_;
}

// repeated string f_rep_string = 15;
inline int Test3::f_rep_string_size() const {
  return f_rep_string_.size();
}
inline void Test3::clear_f_rep_string() {
  f_rep_string_.Clear();
}
inline const ::std::string& Test3::f_rep_string(int index) const {
  // @@protoc_insertion_point(field_get:Test3.f_rep_string)
  return f_rep_string_.Get(index);
}
inline ::std::string* Test3::mutable_f_rep_string(int index) {
  // @@protoc_insertion_point(field_mutable:Test3.f_rep_string)
  return f_rep_string_.Mutable(index);
}
inline void Test3::set_f_rep_string(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Test3.f_rep_string)
  f_rep_string_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Test3::set_f_rep_string(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Test3.f_rep_string)
  f_rep_string_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Test3::set_f_rep_string(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  f_rep_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Test3.f_rep_string)
}
inline void Test3::set_f_rep_string(int index, const char* value, size_t size) {
  f_rep_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Test3.f_rep_string)
}
inline ::std::string* Test3::add_f_rep_string() {
  // @@protoc_insertion_point(field_add_mutable:Test3.f_rep_string)
  return f_rep_string_.Add();
}
inline void Test3::add_f_rep_string(const ::std::string& value) {
  f_rep_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Test3.f_rep_string)
}
#if LANG_CXX11
inline void Test3::add_f_rep_string(::std::string&& value) {
  f_rep_string_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Test3.f_rep_string)
}
#endif
inline void Test3::add_f_rep_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  f_rep_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Test3.f_rep_string)
}
inline void Test3::add_f_rep_string(const char* value, size_t size) {
  f_rep_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Test3.f_rep_string)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Test3::f_rep_string() const {
  // @@protoc_insertion_point(field_list:Test3.f_rep_string)
  return f_rep_string_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Test3::mutable_f_rep_string() {
  // @@protoc_insertion_point(field_mutable_list:Test3.f_rep_string)
  return &f_rep_string_;
}

// repeated .Test3.InnerReq f_rep_inner_req = 16;
inline int Test3::f_rep_inner_req_size() const {
  return f_rep_inner_req_.size();
}
inline void Test3::clear_f_rep_inner_req() {
  f_rep_inner_req_.Clear();
}
inline ::Test3_InnerReq* Test3::mutable_f_rep_inner_req(int index) {
  // @@protoc_insertion_point(field_mutable:Test3.f_rep_inner_req)
  return f_rep_inner_req_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Test3_InnerReq >*
Test3::mutable_f_rep_inner_req() {
  // @@protoc_insertion_point(field_mutable_list:Test3.f_rep_inner_req)
  return &f_rep_inner_req_;
}
inline const ::Test3_InnerReq& Test3::f_rep_inner_req(int index) const {
  // @@protoc_insertion_point(field_get:Test3.f_rep_inner_req)
  return f_rep_inner_req_.Get(index);
}
inline ::Test3_InnerReq* Test3::add_f_rep_inner_req() {
  // @@protoc_insertion_point(field_add:Test3.f_rep_inner_req)
  return f_rep_inner_req_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Test3_InnerReq >&
Test3::f_rep_inner_req() const {
  // @@protoc_insertion_point(field_list:Test3.f_rep_inner_req)
  return f_rep_inner_req_;
}

// repeated .Test3.InnerOpt f_rep_inner_opt = 17;
inline int Test3::f_rep_inner_opt_size() const {
  return f_rep_inner_opt_.size();
}
inline void Test3::clear_f_rep_inner_opt() {
  f_rep_inner_opt_.Clear();
}
inline ::Test3_InnerOpt* Test3::mutable_f_rep_inner_opt(int index) {
  // @@protoc_insertion_point(field_mutable:Test3.f_rep_inner_opt)
  return f_rep_inner_opt_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Test3_InnerOpt >*
Test3::mutable_f_rep_inner_opt() {
  // @@protoc_insertion_point(field_mutable_list:Test3.f_rep_inner_opt)
  return &f_rep_inner_opt_;
}
inline const ::Test3_InnerOpt& Test3::f_rep_inner_opt(int index) const {
  // @@protoc_insertion_point(field_get:Test3.f_rep_inner_opt)
  return f_rep_inner_opt_.Get(index);
}
inline ::Test3_InnerOpt* Test3::add_f_rep_inner_opt() {
  // @@protoc_insertion_point(field_add:Test3.f_rep_inner_opt)
  return f_rep_inner_opt_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Test3_InnerOpt >&
Test3::f_rep_inner_opt() const {
  // @@protoc_insertion_point(field_list:Test3.f_rep_inner_opt)
  return f_rep_inner_opt_;
}

// repeated .Test3.InnerRep f_rep_inner_rep = 18;
inline int Test3::f_rep_inner_rep_size() const {
  return f_rep_inner_rep_.size();
}
inline void Test3::clear_f_rep_inner_rep() {
  f_rep_inner_rep_.Clear();
}
inline ::Test3_InnerRep* Test3::mutable_f_rep_inner_rep(int index) {
  // @@protoc_insertion_point(field_mutable:Test3.f_rep_inner_rep)
  return f_rep_inner_rep_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Test3_InnerRep >*
Test3::mutable_f_rep_inner_rep() {
  // @@protoc_insertion_point(field_mutable_list:Test3.f_rep_inner_rep)
  return &f_rep_inner_rep_;
}
inline const ::Test3_InnerRep& Test3::f_rep_inner_rep(int index) const {
  // @@protoc_insertion_point(field_get:Test3.f_rep_inner_rep)
  return f_rep_inner_rep_.Get(index);
}
inline ::Test3_InnerRep* Test3::add_f_rep_inner_rep() {
  // @@protoc_insertion_point(field_add:Test3.f_rep_inner_rep)
  return f_rep_inner_rep_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Test3_InnerRep >&
Test3::f_rep_inner_rep() const {
  // @@protoc_insertion_point(field_list:Test3.f_rep_inner_rep)
  return f_rep_inner_rep_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Test4

// optional int32 f1 = 10;
inline bool Test4::has_f1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Test4::set_has_f1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Test4::clear_has_f1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Test4::clear_f1() {
  f1_ = 0;
  clear_has_f1();
}
inline ::google::protobuf::int32 Test4::f1() const {
  // @@protoc_insertion_point(field_get:Test4.f1)
  return f1_;
}
inline void Test4::set_f1(::google::protobuf::int32 value) {
  set_has_f1();
  f1_ = value;
  // @@protoc_insertion_point(field_set:Test4.f1)
}

// optional string f2 = 3;
inline bool Test4::has_f2() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Test4::set_has_f2() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Test4::clear_has_f2() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Test4::clear_f2() {
  f2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_f2();
}
inline const ::std::string& Test4::f2() const {
  // @@protoc_insertion_point(field_get:Test4.f2)
  return f2_.GetNoArena();
}
inline void Test4::set_f2(const ::std::string& value) {
  set_has_f2();
  f2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Test4.f2)
}
#if LANG_CXX11
inline void Test4::set_f2(::std::string&& value) {
  set_has_f2();
  f2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Test4.f2)
}
#endif
inline void Test4::set_f2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_f2();
  f2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Test4.f2)
}
inline void Test4::set_f2(const char* value, size_t size) {
  set_has_f2();
  f2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Test4.f2)
}
inline ::std::string* Test4::mutable_f2() {
  set_has_f2();
  // @@protoc_insertion_point(field_mutable:Test4.f2)
  return f2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Test4::release_f2() {
  // @@protoc_insertion_point(field_release:Test4.f2)
  clear_has_f2();
  return f2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test4::set_allocated_f2(::std::string* f2) {
  if (f2 != NULL) {
    set_has_f2();
  } else {
    clear_has_f2();
  }
  f2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), f2);
  // @@protoc_insertion_point(field_set_allocated:Test4.f2)
}

// optional float f3 = 2;
inline bool Test4::has_f3() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Test4::set_has_f3() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Test4::clear_has_f3() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Test4::clear_f3() {
  f3_ = 0;
  clear_has_f3();
}
inline float Test4::f3() const {
  // @@protoc_insertion_point(field_get:Test4.f3)
  return f3_;
}
inline void Test4::set_f3(float value) {
  set_has_f3();
  f3_ = value;
  // @@protoc_insertion_point(field_set:Test4.f3)
}

// optional double f4 = 160;
inline bool Test4::has_f4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Test4::set_has_f4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Test4::clear_has_f4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Test4::clear_f4() {
  f4_ = 0;
  clear_has_f4();
}
inline double Test4::f4() const {
  // @@protoc_insertion_point(field_get:Test4.f4)
  return f4_;
}
inline void Test4::set_f4(double value) {
  set_has_f4();
  f4_ = value;
  // @@protoc_insertion_point(field_set:Test4.f4)
}

// map<int32, int32> f5 = 99;
inline int Test4::f5_size() const {
  return f5_.size();
}
inline void Test4::clear_f5() {
  f5_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >&
Test4::f5() const {
  // @@protoc_insertion_point(field_map:Test4.f5)
  return f5_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >*
Test4::mutable_f5() {
  // @@protoc_insertion_point(field_mutable_map:Test4.f5)
  return f5_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Test2_TestEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Test2_TestEnum>() {
  return ::Test2_TestEnum_descriptor();
}
template <> struct is_proto_enum< ::Enum0> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Enum0>() {
  return ::Enum0_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pbtest2_2eproto_INCLUDED
